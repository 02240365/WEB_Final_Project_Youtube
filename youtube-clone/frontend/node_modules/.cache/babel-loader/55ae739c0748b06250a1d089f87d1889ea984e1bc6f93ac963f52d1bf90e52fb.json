{"ast":null,"code":"\"use client\";\n\nvar _jsxFileName = \"/Users/sonamzangmo/Desktop/WEB_Final_Project_Youtube/youtube-clone/frontend/src/components/videos/VideoPlayer.jsx\",\n  _s = $RefreshSig$();\nimport { useState, useRef, useEffect } from \"react\";\nimport \"./VideoPlayer.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst VideoPlayer = ({\n  videoUrl,\n  thumbnailUrl,\n  title\n}) => {\n  _s();\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const videoRef = useRef(null);\n\n  // Construct video URL - use sample video if original doesn't work\n  const getVideoSrc = () => {\n    // For demo purposes, use a working sample video\n    const sampleVideoUrl = \"https://youtu.be/eC1objpTIE8?si=Lv-1RiTuMEFoxVTx\";\n    if (!videoUrl) {\n      console.log(\"No video URL provided, using sample video\");\n      return sampleVideoUrl;\n    }\n    console.log(\"Original video URL:\", videoUrl);\n\n    // If it's already a full URL, try it first\n    if (videoUrl.startsWith(\"http\")) {\n      return videoUrl;\n    }\n\n    // Try to construct local URL\n    const baseUrl = \"http://localhost:5001\";\n    let localUrl = \"\";\n    if (videoUrl.startsWith(\"/uploads\")) {\n      localUrl = `${baseUrl}${videoUrl}`;\n    } else if (videoUrl.startsWith(\"uploads\")) {\n      localUrl = `${baseUrl}/${videoUrl}`;\n    } else {\n      localUrl = `${baseUrl}/uploads/videos/${videoUrl}`;\n    }\n    console.log(\"Constructed local URL:\", localUrl);\n\n    // For now, return sample video to ensure playback works\n    return sampleVideoUrl;\n  };\n  const videoSrc = getVideoSrc();\n  useEffect(() => {\n    console.log(\"VideoPlayer - Using video source:\", videoSrc);\n    setIsLoading(false); // Don't pre-check, let video element handle it\n  }, [videoSrc]);\n  const handleVideoError = e => {\n    console.error(\"Video playback error:\", e);\n    const video = e.target;\n    if (video.error) {\n      console.error(\"Video error details:\", {\n        code: video.error.code,\n        message: video.error.message,\n        src: video.src\n      });\n    }\n    setError(\"Cannot play this video\");\n    setIsLoading(false);\n  };\n  const handleVideoLoad = () => {\n    console.log(\"Video loaded successfully\");\n    setIsLoading(false);\n    setError(null);\n  };\n  const handleVideoLoadStart = () => {\n    console.log(\"Video load started\");\n    setIsLoading(true);\n  };\n  const handleVideoCanPlay = () => {\n    console.log(\"Video can play\");\n    setIsLoading(false);\n  };\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"video-player-error\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"error-icon\",\n          children: \"\\u26A0\\uFE0F\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Video Unavailable\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"debug-info\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Video URL:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 92,\n              columnNumber: 15\n            }, this), \" \", videoSrc]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Original URL:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 95,\n              columnNumber: 15\n            }, this), \" \", videoUrl]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"retry-button\",\n          onClick: () => {\n            setError(null);\n            setIsLoading(true);\n            if (videoRef.current) {\n              videoRef.current.load();\n            }\n          },\n          children: \"Try Again\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"video-player-container\",\n    children: [isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"video-loading-overlay\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-spinner\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading video...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"video\", {\n      ref: videoRef,\n      className: \"video-player\",\n      src: videoSrc,\n      poster: thumbnailUrl,\n      controls: true,\n      preload: \"metadata\",\n      onError: handleVideoError,\n      onLoadedData: handleVideoLoad,\n      onLoadStart: handleVideoLoadStart,\n      onCanPlay: handleVideoCanPlay,\n      style: {\n        width: \"100%\",\n        height: \"auto\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"source\", {\n        src: videoSrc,\n        type: \"video/mp4\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }, this), \"Your browser does not support the video tag.\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 116,\n    columnNumber: 5\n  }, this);\n};\n_s(VideoPlayer, \"3PDWW9Q4gjEDuzmMQHuDixJhT0o=\");\n_c = VideoPlayer;\nexport default VideoPlayer;\nvar _c;\n$RefreshReg$(_c, \"VideoPlayer\");","map":{"version":3,"names":["_jsxFileName","_s","$RefreshSig$","useState","useRef","useEffect","jsxDEV","_jsxDEV","VideoPlayer","videoUrl","thumbnailUrl","title","error","setError","isLoading","setIsLoading","videoRef","getVideoSrc","sampleVideoUrl","console","log","startsWith","baseUrl","localUrl","videoSrc","handleVideoError","e","video","target","code","message","src","handleVideoLoad","handleVideoLoadStart","handleVideoCanPlay","className","children","fileName","lineNumber","columnNumber","onClick","current","load","ref","poster","controls","preload","onError","onLoadedData","onLoadStart","onCanPlay","style","width","height","type","_c","$RefreshReg$"],"sources":["/Users/sonamzangmo/Desktop/WEB_Final_Project_Youtube/youtube-clone/frontend/src/components/videos/VideoPlayer.jsx"],"sourcesContent":["\"use client\"\n\nimport { useState, useRef, useEffect } from \"react\"\nimport \"./VideoPlayer.css\"\n\nconst VideoPlayer = ({ videoUrl, thumbnailUrl, title }) => {\n  const [error, setError] = useState(null)\n  const [isLoading, setIsLoading] = useState(true)\n  const videoRef = useRef(null)\n\n  // Construct video URL - use sample video if original doesn't work\n  const getVideoSrc = () => {\n    // For demo purposes, use a working sample video\n    const sampleVideoUrl = \"https://youtu.be/eC1objpTIE8?si=Lv-1RiTuMEFoxVTx\"\n\n    if (!videoUrl) {\n      console.log(\"No video URL provided, using sample video\")\n      return sampleVideoUrl\n    }\n\n    console.log(\"Original video URL:\", videoUrl)\n\n    // If it's already a full URL, try it first\n    if (videoUrl.startsWith(\"http\")) {\n      return videoUrl\n    }\n\n    // Try to construct local URL\n    const baseUrl = \"http://localhost:5001\"\n    let localUrl = \"\"\n\n    if (videoUrl.startsWith(\"/uploads\")) {\n      localUrl = `${baseUrl}${videoUrl}`\n    } else if (videoUrl.startsWith(\"uploads\")) {\n      localUrl = `${baseUrl}/${videoUrl}`\n    } else {\n      localUrl = `${baseUrl}/uploads/videos/${videoUrl}`\n    }\n\n    console.log(\"Constructed local URL:\", localUrl)\n\n    // For now, return sample video to ensure playback works\n    return sampleVideoUrl\n  }\n\n  const videoSrc = getVideoSrc()\n\n  useEffect(() => {\n    console.log(\"VideoPlayer - Using video source:\", videoSrc)\n    setIsLoading(false) // Don't pre-check, let video element handle it\n  }, [videoSrc])\n\n  const handleVideoError = (e) => {\n    console.error(\"Video playback error:\", e)\n    const video = e.target\n    if (video.error) {\n      console.error(\"Video error details:\", {\n        code: video.error.code,\n        message: video.error.message,\n        src: video.src,\n      })\n    }\n    setError(\"Cannot play this video\")\n    setIsLoading(false)\n  }\n\n  const handleVideoLoad = () => {\n    console.log(\"Video loaded successfully\")\n    setIsLoading(false)\n    setError(null)\n  }\n\n  const handleVideoLoadStart = () => {\n    console.log(\"Video load started\")\n    setIsLoading(true)\n  }\n\n  const handleVideoCanPlay = () => {\n    console.log(\"Video can play\")\n    setIsLoading(false)\n  }\n\n  if (error) {\n    return (\n      <div className=\"video-player-error\">\n        <div className=\"error-content\">\n          <div className=\"error-icon\">⚠️</div>\n          <h3>Video Unavailable</h3>\n          <p>{error}</p>\n          <div className=\"debug-info\">\n            <p>\n              <strong>Video URL:</strong> {videoSrc}\n            </p>\n            <p>\n              <strong>Original URL:</strong> {videoUrl}\n            </p>\n          </div>\n          <button\n            className=\"retry-button\"\n            onClick={() => {\n              setError(null)\n              setIsLoading(true)\n              if (videoRef.current) {\n                videoRef.current.load()\n              }\n            }}\n          >\n            Try Again\n          </button>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"video-player-container\">\n      {isLoading && (\n        <div className=\"video-loading-overlay\">\n          <div className=\"loading-spinner\"></div>\n          <p>Loading video...</p>\n        </div>\n      )}\n\n      <video\n        ref={videoRef}\n        className=\"video-player\"\n        src={videoSrc}\n        poster={thumbnailUrl}\n        controls\n        preload=\"metadata\"\n        onError={handleVideoError}\n        onLoadedData={handleVideoLoad}\n        onLoadStart={handleVideoLoadStart}\n        onCanPlay={handleVideoCanPlay}\n        style={{ width: \"100%\", height: \"auto\" }}\n      >\n        <source src={videoSrc} type=\"video/mp4\" />\n        Your browser does not support the video tag.\n      </video>\n    </div>\n  )\n}\n\nexport default VideoPlayer\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"\"use client\";\n\nvar _jsxFileName = \"/Users/sonamzangmo/Downloads/youtube-clone/frontend/src/components/videos/VideoPlayer.jsx\",\n  _s = $RefreshSig$();\nimport { useState, useRef, useEffect } from \"react\";\nimport \"./VideoPlayer.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst VideoPlayer = ({\n  videoUrl,\n  title,\n  autoplay = false\n}) => {\n  _s();\n  const videoRef = useRef(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [videoSrc, setVideoSrc] = useState(\"\");\n\n  // Get the upload URL from environment variables or default to port 5001\n  const UPLOAD_URL = process.env.REACT_APP_UPLOAD_URL || \"http://localhost:5001/uploads\";\n  useEffect(() => {\n    setIsLoading(true);\n    setError(null);\n\n    // Handle different URL formats\n    let fullVideoUrl = videoUrl;\n\n    // If the URL is relative (starts with / or doesn't have http), prepend the UPLOAD_URL\n    if (videoUrl && (videoUrl.startsWith(\"/\") || !videoUrl.includes(\"http\"))) {\n      // Remove leading slash if present\n      const cleanPath = videoUrl.startsWith(\"/\") ? videoUrl.substring(1) : videoUrl;\n      fullVideoUrl = `${UPLOAD_URL}/${cleanPath}`;\n    }\n    console.log(\"Video URL:\", fullVideoUrl);\n    setVideoSrc(fullVideoUrl);\n\n    // Pre-load the video\n    const video = videoRef.current;\n    if (video) {\n      video.load();\n    }\n  }, [videoUrl]);\n  const handleLoadStart = () => {\n    setIsLoading(true);\n  };\n  const handleCanPlay = () => {\n    setIsLoading(false);\n    if (autoplay) {\n      videoRef.current.play().catch(err => {\n        console.error(\"Autoplay failed:\", err);\n      });\n    }\n  };\n  const handleError = e => {\n    console.error(\"Video error:\", e);\n    setIsLoading(false);\n    setError(`Failed to load video. URL: ${videoSrc}`);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"video-player-container\",\n    children: [isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"video-loading\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-spinner\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading video...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"video-error\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => window.location.reload(),\n        children: \"Retry\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"video\", {\n      ref: videoRef,\n      className: \"video-player\",\n      controls: true,\n      onLoadStart: handleLoadStart,\n      onCanPlay: handleCanPlay,\n      onError: handleError,\n      children: [/*#__PURE__*/_jsxDEV(\"source\", {\n        src: videoSrc,\n        type: \"video/mp4\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), \"Your browser does not support the video tag.\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), process.env.NODE_ENV === \"development\" && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"video-debug\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Debug Info:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Video URL: \", videoSrc]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Status: \", isLoading ? \"Loading\" : error ? \"Error\" : \"Ready\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n};\n_s(VideoPlayer, \"za2MQb7opIC9KYfGcTsTK0ulsYo=\");\n_c = VideoPlayer;\nexport default VideoPlayer;\nvar _c;\n$RefreshReg$(_c, \"VideoPlayer\");","map":{"version":3,"names":["_jsxFileName","_s","$RefreshSig$","useState","useRef","useEffect","jsxDEV","_jsxDEV","VideoPlayer","videoUrl","title","autoplay","videoRef","isLoading","setIsLoading","error","setError","videoSrc","setVideoSrc","UPLOAD_URL","process","env","REACT_APP_UPLOAD_URL","fullVideoUrl","startsWith","includes","cleanPath","substring","console","log","video","current","load","handleLoadStart","handleCanPlay","play","catch","err","handleError","e","className","children","fileName","lineNumber","columnNumber","onClick","window","location","reload","ref","controls","onLoadStart","onCanPlay","onError","src","type","NODE_ENV","_c","$RefreshReg$"],"sources":["/Users/sonamzangmo/Downloads/youtube-clone/frontend/src/components/videos/VideoPlayer.jsx"],"sourcesContent":["\"use client\"\n\nimport { useState, useRef, useEffect } from \"react\"\nimport \"./VideoPlayer.css\"\n\nconst VideoPlayer = ({ videoUrl, title, autoplay = false }) => {\n  const videoRef = useRef(null)\n  const [isLoading, setIsLoading] = useState(true)\n  const [error, setError] = useState(null)\n  const [videoSrc, setVideoSrc] = useState(\"\")\n\n  // Get the upload URL from environment variables or default to port 5001\n  const UPLOAD_URL = process.env.REACT_APP_UPLOAD_URL || \"http://localhost:5001/uploads\"\n\n  useEffect(() => {\n    setIsLoading(true)\n    setError(null)\n\n    // Handle different URL formats\n    let fullVideoUrl = videoUrl\n\n    // If the URL is relative (starts with / or doesn't have http), prepend the UPLOAD_URL\n    if (videoUrl && (videoUrl.startsWith(\"/\") || !videoUrl.includes(\"http\"))) {\n      // Remove leading slash if present\n      const cleanPath = videoUrl.startsWith(\"/\") ? videoUrl.substring(1) : videoUrl\n      fullVideoUrl = `${UPLOAD_URL}/${cleanPath}`\n    }\n\n    console.log(\"Video URL:\", fullVideoUrl)\n    setVideoSrc(fullVideoUrl)\n\n    // Pre-load the video\n    const video = videoRef.current\n    if (video) {\n      video.load()\n    }\n  }, [videoUrl])\n\n  const handleLoadStart = () => {\n    setIsLoading(true)\n  }\n\n  const handleCanPlay = () => {\n    setIsLoading(false)\n    if (autoplay) {\n      videoRef.current.play().catch((err) => {\n        console.error(\"Autoplay failed:\", err)\n      })\n    }\n  }\n\n  const handleError = (e) => {\n    console.error(\"Video error:\", e)\n    setIsLoading(false)\n    setError(`Failed to load video. URL: ${videoSrc}`)\n  }\n\n  return (\n    <div className=\"video-player-container\">\n      {isLoading && (\n        <div className=\"video-loading\">\n          <div className=\"loading-spinner\"></div>\n          <p>Loading video...</p>\n        </div>\n      )}\n\n      {error && (\n        <div className=\"video-error\">\n          <p>{error}</p>\n          <button onClick={() => window.location.reload()}>Retry</button>\n        </div>\n      )}\n\n      <video\n        ref={videoRef}\n        className=\"video-player\"\n        controls\n        onLoadStart={handleLoadStart}\n        onCanPlay={handleCanPlay}\n        onError={handleError}\n      >\n        <source src={videoSrc} type=\"video/mp4\" />\n        Your browser does not support the video tag.\n      </video>\n\n      {/* Debug info - only shown in development */}\n      {process.env.NODE_ENV === \"development\" && (\n        <div className=\"video-debug\">\n          <p>Debug Info:</p>\n          <p>Video URL: {videoSrc}</p>\n          <p>Status: {isLoading ? \"Loading\" : error ? \"Error\" : \"Ready\"}</p>\n        </div>\n      )}\n    </div>\n  )\n}\n\nexport default VideoPlayer\n"],"mappings":"AAAA,YAAY;;AAAA,IAAAA,YAAA;EAAAC,EAAA,GAAAC,YAAA;AAEZ,SAASC,QAAQ,EAAEC,MAAM,EAAEC,SAAS,QAAQ,OAAO;AACnD,OAAO,mBAAmB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,WAAW,GAAGA,CAAC;EAAEC,QAAQ;EAAEC,KAAK;EAAEC,QAAQ,GAAG;AAAM,CAAC,KAAK;EAAAV,EAAA;EAC7D,MAAMW,QAAQ,GAAGR,MAAM,CAAC,IAAI,CAAC;EAC7B,MAAM,CAACS,SAAS,EAAEC,YAAY,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAACY,KAAK,EAAEC,QAAQ,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACc,QAAQ,EAAEC,WAAW,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;;EAE5C;EACA,MAAMgB,UAAU,GAAGC,OAAO,CAACC,GAAG,CAACC,oBAAoB,IAAI,+BAA+B;EAEtFjB,SAAS,CAAC,MAAM;IACdS,YAAY,CAAC,IAAI,CAAC;IAClBE,QAAQ,CAAC,IAAI,CAAC;;IAEd;IACA,IAAIO,YAAY,GAAGd,QAAQ;;IAE3B;IACA,IAAIA,QAAQ,KAAKA,QAAQ,CAACe,UAAU,CAAC,GAAG,CAAC,IAAI,CAACf,QAAQ,CAACgB,QAAQ,CAAC,MAAM,CAAC,CAAC,EAAE;MACxE;MACA,MAAMC,SAAS,GAAGjB,QAAQ,CAACe,UAAU,CAAC,GAAG,CAAC,GAAGf,QAAQ,CAACkB,SAAS,CAAC,CAAC,CAAC,GAAGlB,QAAQ;MAC7Ec,YAAY,GAAG,GAAGJ,UAAU,IAAIO,SAAS,EAAE;IAC7C;IAEAE,OAAO,CAACC,GAAG,CAAC,YAAY,EAAEN,YAAY,CAAC;IACvCL,WAAW,CAACK,YAAY,CAAC;;IAEzB;IACA,MAAMO,KAAK,GAAGlB,QAAQ,CAACmB,OAAO;IAC9B,IAAID,KAAK,EAAE;MACTA,KAAK,CAACE,IAAI,CAAC,CAAC;IACd;EACF,CAAC,EAAE,CAACvB,QAAQ,CAAC,CAAC;EAEd,MAAMwB,eAAe,GAAGA,CAAA,KAAM;IAC5BnB,YAAY,CAAC,IAAI,CAAC;EACpB,CAAC;EAED,MAAMoB,aAAa,GAAGA,CAAA,KAAM;IAC1BpB,YAAY,CAAC,KAAK,CAAC;IACnB,IAAIH,QAAQ,EAAE;MACZC,QAAQ,CAACmB,OAAO,CAACI,IAAI,CAAC,CAAC,CAACC,KAAK,CAAEC,GAAG,IAAK;QACrCT,OAAO,CAACb,KAAK,CAAC,kBAAkB,EAAEsB,GAAG,CAAC;MACxC,CAAC,CAAC;IACJ;EACF,CAAC;EAED,MAAMC,WAAW,GAAIC,CAAC,IAAK;IACzBX,OAAO,CAACb,KAAK,CAAC,cAAc,EAAEwB,CAAC,CAAC;IAChCzB,YAAY,CAAC,KAAK,CAAC;IACnBE,QAAQ,CAAC,8BAA8BC,QAAQ,EAAE,CAAC;EACpD,CAAC;EAED,oBACEV,OAAA;IAAKiC,SAAS,EAAC,wBAAwB;IAAAC,QAAA,GACpC5B,SAAS,iBACRN,OAAA;MAAKiC,SAAS,EAAC,eAAe;MAAAC,QAAA,gBAC5BlC,OAAA;QAAKiC,SAAS,EAAC;MAAiB;QAAAE,QAAA,EAAA1C,YAAA;QAAA2C,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC,eACvCrC,OAAA;QAAAkC,QAAA,EAAG;MAAgB;QAAAC,QAAA,EAAA1C,YAAA;QAAA2C,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC;IAAA;MAAAF,QAAA,EAAA1C,YAAA;MAAA2C,UAAA;MAAAC,YAAA;IAAA,OACpB,CACN,EAEA7B,KAAK,iBACJR,OAAA;MAAKiC,SAAS,EAAC,aAAa;MAAAC,QAAA,gBAC1BlC,OAAA;QAAAkC,QAAA,EAAI1B;MAAK;QAAA2B,QAAA,EAAA1C,YAAA;QAAA2C,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACdrC,OAAA;QAAQsC,OAAO,EAAEA,CAAA,KAAMC,MAAM,CAACC,QAAQ,CAACC,MAAM,CAAC,CAAE;QAAAP,QAAA,EAAC;MAAK;QAAAC,QAAA,EAAA1C,YAAA;QAAA2C,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAF,QAAA,EAAA1C,YAAA;MAAA2C,UAAA;MAAAC,YAAA;IAAA,OAC5D,CACN,eAEDrC,OAAA;MACE0C,GAAG,EAAErC,QAAS;MACd4B,SAAS,EAAC,cAAc;MACxBU,QAAQ;MACRC,WAAW,EAAElB,eAAgB;MAC7BmB,SAAS,EAAElB,aAAc;MACzBmB,OAAO,EAAEf,WAAY;MAAAG,QAAA,gBAErBlC,OAAA;QAAQ+C,GAAG,EAAErC,QAAS;QAACsC,IAAI,EAAC;MAAW;QAAAb,QAAA,EAAA1C,YAAA;QAAA2C,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,gDAE5C;IAAA;MAAAF,QAAA,EAAA1C,YAAA;MAAA2C,UAAA;MAAAC,YAAA;IAAA,OAAO,CAAC,EAGPxB,OAAO,CAACC,GAAG,CAACmC,QAAQ,KAAK,aAAa,iBACrCjD,OAAA;MAAKiC,SAAS,EAAC,aAAa;MAAAC,QAAA,gBAC1BlC,OAAA;QAAAkC,QAAA,EAAG;MAAW;QAAAC,QAAA,EAAA1C,YAAA;QAAA2C,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,eAClBrC,OAAA;QAAAkC,QAAA,GAAG,aAAW,EAACxB,QAAQ;MAAA;QAAAyB,QAAA,EAAA1C,YAAA;QAAA2C,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC5BrC,OAAA;QAAAkC,QAAA,GAAG,UAAQ,EAAC5B,SAAS,GAAG,SAAS,GAAGE,KAAK,GAAG,OAAO,GAAG,OAAO;MAAA;QAAA2B,QAAA,EAAA1C,YAAA;QAAA2C,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IAAA;MAAAF,QAAA,EAAA1C,YAAA;MAAA2C,UAAA;MAAAC,YAAA;IAAA,OAC/D,CACN;EAAA;IAAAF,QAAA,EAAA1C,YAAA;IAAA2C,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAAA3C,EAAA,CA1FKO,WAAW;AAAAiD,EAAA,GAAXjD,WAAW;AA4FjB,eAAeA,WAAW;AAAA,IAAAiD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
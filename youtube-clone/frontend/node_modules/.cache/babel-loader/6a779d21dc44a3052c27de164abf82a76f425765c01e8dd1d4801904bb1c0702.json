{"ast":null,"code":"// api.js - API service functions\n// Contains all API calls for videos, channels, comments, etc.\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || \"http://localhost:5001/api\";\n\n// Helper function to get auth headers\nconst getAuthHeaders = () => {\n  const token = localStorage.getItem(\"authToken\");\n  return {\n    \"Content-Type\": \"application/json\",\n    ...(token && {\n      Authorization: `Bearer ${token}`\n    })\n  };\n};\n\n// Helper function to handle API responses\nconst handleResponse = async response => {\n  if (!response.ok) {\n    const error = await response.json().catch(() => ({\n      message: \"Network error\"\n    }));\n    throw new Error(error.message || `HTTP error! status: ${response.status}`);\n  }\n  return response.json();\n};\n\n// Video API functions\nexport const fetchVideos = async (params = {}) => {\n  const queryParams = new URLSearchParams();\n\n  // Add query parameters\n  if (params.category) queryParams.append(\"category\", params.category);\n  if (params.limit) queryParams.append(\"limit\", params.limit);\n  if (params.offset) queryParams.append(\"offset\", params.offset);\n  if (params.search) queryParams.append(\"search\", params.search);\n  const response = await fetch(`${API_BASE_URL}/videos?${queryParams}`, {\n    headers: getAuthHeaders()\n  });\n  return handleResponse(response);\n};\nexport const fetchVideoById = async videoId => {\n  const response = await fetch(`${API_BASE_URL}/videos/${videoId}`, {\n    headers: getAuthHeaders()\n  });\n  return handleResponse(response);\n};\nexport const fetchRelatedVideos = async videoId => {\n  const response = await fetch(`${API_BASE_URL}/videos/${videoId}/related`, {\n    headers: getAuthHeaders()\n  });\n  return handleResponse(response);\n};\nexport const uploadVideo = async videoData => {\n  const formData = new FormData();\n\n  // Append video file\n  formData.append(\"video\", videoData.videoFile);\n\n  // Append thumbnail if provided\n  if (videoData.thumbnail) {\n    formData.append(\"thumbnail\", videoData.thumbnail);\n  }\n\n  // Append other data\n  formData.append(\"title\", videoData.title);\n  formData.append(\"description\", videoData.description);\n  formData.append(\"category\", videoData.category);\n  formData.append(\"tags\", JSON.stringify(videoData.tags));\n  const token = localStorage.getItem(\"authToken\");\n  const response = await fetch(`${API_BASE_URL}/videos/upload`, {\n    method: \"POST\",\n    headers: {\n      ...(token && {\n        Authorization: `Bearer ${token}`\n      })\n    },\n    body: formData\n  });\n  return handleResponse(response);\n};\nexport const likeVideo = async (videoId, isLike) => {\n  const response = await fetch(`${API_BASE_URL}/videos/${videoId}/like`, {\n    method: \"POST\",\n    headers: getAuthHeaders(),\n    body: JSON.stringify({\n      isLike\n    })\n  });\n  return handleResponse(response);\n};\n\n// Channel API functions\nexport const fetchChannels = async channelIds => {\n  const queryParams = new URLSearchParams();\n  channelIds.forEach(id => queryParams.append(\"ids\", id));\n  const response = await fetch(`${API_BASE_URL}/channels?${queryParams}`, {\n    headers: getAuthHeaders()\n  });\n  return handleResponse(response);\n};\nexport const fetchChannelById = async channelId => {\n  const response = await fetch(`${API_BASE_URL}/channels/${channelId}`, {\n    headers: getAuthHeaders()\n  });\n  return handleResponse(response);\n};\nexport const subscribeToChannel = async (channelId, subscribe) => {\n  const response = await fetch(`${API_BASE_URL}/channels/${channelId}/subscribe`, {\n    method: \"POST\",\n    headers: getAuthHeaders(),\n    body: JSON.stringify({\n      subscribe\n    })\n  });\n  return handleResponse(response);\n};\n\n// Comment API functions\nexport const fetchVideoComments = async videoId => {\n  const response = await fetch(`${API_BASE_URL}/videos/${videoId}/comments`, {\n    headers: getAuthHeaders()\n  });\n  return handleResponse(response);\n};\nexport const addComment = async (videoId, text) => {\n  const response = await fetch(`${API_BASE_URL}/videos/${videoId}/comments`, {\n    method: \"POST\",\n    headers: getAuthHeaders(),\n    body: JSON.stringify({\n      text\n    })\n  });\n  return handleResponse(response);\n};\n\n// Search API functions\nexport const searchVideos = async (query, filters = {}) => {\n  const queryParams = new URLSearchParams();\n  queryParams.append(\"q\", query);\n\n  // Add filter parameters\n  if (filters.category) queryParams.append(\"category\", filters.category);\n  if (filters.duration) queryParams.append(\"duration\", filters.duration);\n  if (filters.uploadDate) queryParams.append(\"uploadDate\", filters.uploadDate);\n  if (filters.sortBy) queryParams.append(\"sortBy\", filters.sortBy);\n  const response = await fetch(`${API_BASE_URL}/search?${queryParams}`, {\n    headers: getAuthHeaders()\n  });\n  return handleResponse(response);\n};\n\n// User API functions\nexport const fetchUserProfile = async userId => {\n  const response = await fetch(`${API_BASE_URL}/users/${userId}`, {\n    headers: getAuthHeaders()\n  });\n  return handleResponse(response);\n};\nexport const updateUserProfile = async userData => {\n  const response = await fetch(`${API_BASE_URL}/users/profile`, {\n    method: \"PUT\",\n    headers: getAuthHeaders(),\n    body: JSON.stringify(userData)\n  });\n  return handleResponse(response);\n};","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_URL","getAuthHeaders","token","localStorage","getItem","Authorization","handleResponse","response","ok","error","json","catch","message","Error","status","fetchVideos","params","queryParams","URLSearchParams","category","append","limit","offset","search","fetch","headers","fetchVideoById","videoId","fetchRelatedVideos","uploadVideo","videoData","formData","FormData","videoFile","thumbnail","title","description","JSON","stringify","tags","method","body","likeVideo","isLike","fetchChannels","channelIds","forEach","id","fetchChannelById","channelId","subscribeToChannel","subscribe","fetchVideoComments","addComment","text","searchVideos","query","filters","duration","uploadDate","sortBy","fetchUserProfile","userId","updateUserProfile","userData"],"sources":["/Users/sonamzangmo/Downloads/youtube-clone/frontend/src/services/api.js"],"sourcesContent":["// api.js - API service functions\n// Contains all API calls for videos, channels, comments, etc.\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || \"http://localhost:5001/api\"\n\n// Helper function to get auth headers\nconst getAuthHeaders = () => {\n  const token = localStorage.getItem(\"authToken\")\n  return {\n    \"Content-Type\": \"application/json\",\n    ...(token && { Authorization: `Bearer ${token}` }),\n  }\n}\n\n// Helper function to handle API responses\nconst handleResponse = async (response) => {\n  if (!response.ok) {\n    const error = await response.json().catch(() => ({ message: \"Network error\" }))\n    throw new Error(error.message || `HTTP error! status: ${response.status}`)\n  }\n  return response.json()\n}\n\n// Video API functions\nexport const fetchVideos = async (params = {}) => {\n  const queryParams = new URLSearchParams()\n\n  // Add query parameters\n  if (params.category) queryParams.append(\"category\", params.category)\n  if (params.limit) queryParams.append(\"limit\", params.limit)\n  if (params.offset) queryParams.append(\"offset\", params.offset)\n  if (params.search) queryParams.append(\"search\", params.search)\n\n  const response = await fetch(`${API_BASE_URL}/videos?${queryParams}`, {\n    headers: getAuthHeaders(),\n  })\n\n  return handleResponse(response)\n}\n\nexport const fetchVideoById = async (videoId) => {\n  const response = await fetch(`${API_BASE_URL}/videos/${videoId}`, {\n    headers: getAuthHeaders(),\n  })\n\n  return handleResponse(response)\n}\n\nexport const fetchRelatedVideos = async (videoId) => {\n  const response = await fetch(`${API_BASE_URL}/videos/${videoId}/related`, {\n    headers: getAuthHeaders(),\n  })\n\n  return handleResponse(response)\n}\n\nexport const uploadVideo = async (videoData) => {\n  const formData = new FormData()\n\n  // Append video file\n  formData.append(\"video\", videoData.videoFile)\n\n  // Append thumbnail if provided\n  if (videoData.thumbnail) {\n    formData.append(\"thumbnail\", videoData.thumbnail)\n  }\n\n  // Append other data\n  formData.append(\"title\", videoData.title)\n  formData.append(\"description\", videoData.description)\n  formData.append(\"category\", videoData.category)\n  formData.append(\"tags\", JSON.stringify(videoData.tags))\n\n  const token = localStorage.getItem(\"authToken\")\n  const response = await fetch(`${API_BASE_URL}/videos/upload`, {\n    method: \"POST\",\n    headers: {\n      ...(token && { Authorization: `Bearer ${token}` }),\n    },\n    body: formData,\n  })\n\n  return handleResponse(response)\n}\n\nexport const likeVideo = async (videoId, isLike) => {\n  const response = await fetch(`${API_BASE_URL}/videos/${videoId}/like`, {\n    method: \"POST\",\n    headers: getAuthHeaders(),\n    body: JSON.stringify({ isLike }),\n  })\n\n  return handleResponse(response)\n}\n\n// Channel API functions\nexport const fetchChannels = async (channelIds) => {\n  const queryParams = new URLSearchParams()\n  channelIds.forEach((id) => queryParams.append(\"ids\", id))\n\n  const response = await fetch(`${API_BASE_URL}/channels?${queryParams}`, {\n    headers: getAuthHeaders(),\n  })\n\n  return handleResponse(response)\n}\n\nexport const fetchChannelById = async (channelId) => {\n  const response = await fetch(`${API_BASE_URL}/channels/${channelId}`, {\n    headers: getAuthHeaders(),\n  })\n\n  return handleResponse(response)\n}\n\nexport const subscribeToChannel = async (channelId, subscribe) => {\n  const response = await fetch(`${API_BASE_URL}/channels/${channelId}/subscribe`, {\n    method: \"POST\",\n    headers: getAuthHeaders(),\n    body: JSON.stringify({ subscribe }),\n  })\n\n  return handleResponse(response)\n}\n\n// Comment API functions\nexport const fetchVideoComments = async (videoId) => {\n  const response = await fetch(`${API_BASE_URL}/videos/${videoId}/comments`, {\n    headers: getAuthHeaders(),\n  })\n\n  return handleResponse(response)\n}\n\nexport const addComment = async (videoId, text) => {\n  const response = await fetch(`${API_BASE_URL}/videos/${videoId}/comments`, {\n    method: \"POST\",\n    headers: getAuthHeaders(),\n    body: JSON.stringify({ text }),\n  })\n\n  return handleResponse(response)\n}\n\n// Search API functions\nexport const searchVideos = async (query, filters = {}) => {\n  const queryParams = new URLSearchParams()\n  queryParams.append(\"q\", query)\n\n  // Add filter parameters\n  if (filters.category) queryParams.append(\"category\", filters.category)\n  if (filters.duration) queryParams.append(\"duration\", filters.duration)\n  if (filters.uploadDate) queryParams.append(\"uploadDate\", filters.uploadDate)\n  if (filters.sortBy) queryParams.append(\"sortBy\", filters.sortBy)\n\n  const response = await fetch(`${API_BASE_URL}/search?${queryParams}`, {\n    headers: getAuthHeaders(),\n  })\n\n  return handleResponse(response)\n}\n\n// User API functions\nexport const fetchUserProfile = async (userId) => {\n  const response = await fetch(`${API_BASE_URL}/users/${userId}`, {\n    headers: getAuthHeaders(),\n  })\n\n  return handleResponse(response)\n}\n\nexport const updateUserProfile = async (userData) => {\n  const response = await fetch(`${API_BASE_URL}/users/profile`, {\n    method: \"PUT\",\n    headers: getAuthHeaders(),\n    body: JSON.stringify(userData),\n  })\n\n  return handleResponse(response)\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"\"use client\";import{createContext,useContext,useState,useEffect}from\"react\";import{loginUser,registerUser,logoutUser,getCurrentUser}from\"../services/auth\";import{toast}from\"react-toastify\";// Create the authentication context\nimport{jsx as _jsx}from\"react/jsx-runtime\";const AuthContext=/*#__PURE__*/createContext();// Custom hook to use the auth context\nexport const useAuth=()=>{const context=useContext(AuthContext);if(!context){throw new Error(\"useAuth must be used within an AuthProvider\");}return context;};// Authentication provider component\nexport const AuthProvider=_ref=>{let{children}=_ref;const[currentUser,setCurrentUser]=useState(null);const[loading,setLoading]=useState(true);// Check if user is logged in on app start\nuseEffect(()=>{checkAuthStatus();},[]);// Check authentication status\nconst checkAuthStatus=async()=>{try{const token=localStorage.getItem(\"authToken\");if(token){const user=await getCurrentUser();setCurrentUser(user);}}catch(error){console.error(\"Error checking auth status:\",error);localStorage.removeItem(\"authToken\");}finally{setLoading(false);}};// Login function\nconst login=async(email,password)=>{try{const response=await loginUser(email,password);localStorage.setItem(\"authToken\",response.token);setCurrentUser(response.user);toast.success(\"Logged in successfully!\");return response;}catch(error){console.error(\"Login error:\",error);toast.error(error.message||\"Failed to log in\");throw error;}};// Register function\nconst register=async userData=>{try{const response=await registerUser(userData);localStorage.setItem(\"authToken\",response.token);setCurrentUser(response.user);toast.success(\"Account created successfully!\");return response;}catch(error){console.error(\"Registration error:\",error);toast.error(error.message||\"Failed to create account\");throw error;}};// Logout function\nconst logout=async()=>{try{await logoutUser();}catch(error){console.error(\"Logout error:\",error);}finally{localStorage.removeItem(\"authToken\");setCurrentUser(null);toast.success(\"Logged out successfully\");}};// Update user profile\nconst updateProfile=updatedUser=>{setCurrentUser(updatedUser);};// Context value\nconst value={currentUser,login,register,logout,updateProfile,loading};return/*#__PURE__*/_jsx(AuthContext.Provider,{value:value,children:!loading&&children});};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
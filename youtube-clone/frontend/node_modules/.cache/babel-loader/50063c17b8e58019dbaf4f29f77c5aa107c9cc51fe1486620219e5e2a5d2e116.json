{"ast":null,"code":"\"use client\";\n\nvar _jsxFileName = \"/Users/sonamzangmo/Downloads/youtube-clone/frontend/src/components/videos/VideoPlayer.jsx\",\n  _s = $RefreshSig$();\nimport { useState, useRef, useEffect } from \"react\";\nimport \"./VideoPlayer.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst VideoPlayer = ({\n  videoUrl,\n  thumbnailUrl,\n  title\n}) => {\n  _s();\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [duration, setDuration] = useState(0);\n  const [volume, setVolume] = useState(1);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const videoRef = useRef(null);\n\n  // Get the correct video URL with port 5001\n  const getFullVideoUrl = () => {\n    if (!videoUrl) return \"\";\n\n    // If it's already a full URL, return it\n    if (videoUrl.startsWith(\"http\")) {\n      return videoUrl;\n    }\n\n    // Build the full URL with port 5001\n    const baseUrl = \"http://localhost:5001\";\n\n    // If the URL starts with /uploads, it's a local file\n    if (videoUrl.startsWith(\"/uploads\")) {\n      return `${baseUrl}${videoUrl}`;\n    }\n\n    // If the URL starts with uploads, it's a local file without leading slash\n    if (videoUrl.startsWith(\"uploads\")) {\n      return `${baseUrl}/${videoUrl}`;\n    }\n\n    // Otherwise, assume it's just the filename\n    return `${baseUrl}/uploads/videos/${videoUrl}`;\n  };\n\n  // Get the correct thumbnail URL with port 5001\n  const getFullThumbnailUrl = () => {\n    if (!thumbnailUrl) return \"\";\n\n    // If it's already a full URL, return it\n    if (thumbnailUrl.startsWith(\"http\")) {\n      return thumbnailUrl;\n    }\n\n    // Build the full URL with port 5001\n    const baseUrl = \"http://localhost:5001\";\n\n    // If the URL starts with /uploads, it's a local file\n    if (thumbnailUrl.startsWith(\"/uploads\")) {\n      return `${baseUrl}${thumbnailUrl}`;\n    }\n\n    // If the URL starts with uploads, it's a local file without leading slash\n    if (thumbnailUrl.startsWith(\"uploads\")) {\n      return `${baseUrl}/${thumbnailUrl}`;\n    }\n\n    // Otherwise, assume it's just the filename\n    return `${baseUrl}/uploads/thumbnails/${thumbnailUrl}`;\n  };\n  const fullVideoUrl = getFullVideoUrl();\n  const fullThumbnailUrl = getFullThumbnailUrl();\n\n  // Debug logging\n  useEffect(() => {\n    console.log(\"Video URL:\", videoUrl);\n    console.log(\"Full video URL:\", fullVideoUrl);\n    console.log(\"Thumbnail URL:\", thumbnailUrl);\n    console.log(\"Full thumbnail URL:\", fullThumbnailUrl);\n  }, [videoUrl, thumbnailUrl, fullVideoUrl, fullThumbnailUrl]);\n\n  // Handle video events\n  useEffect(() => {\n    const video = videoRef.current;\n    if (!video) return;\n    const handleLoadStart = () => {\n      console.log(\"Video load started\");\n      setIsLoading(true);\n    };\n    const handleCanPlay = () => {\n      console.log(\"Video can play\");\n      setIsLoading(false);\n    };\n    const handleLoadedMetadata = () => {\n      console.log(\"Video metadata loaded\");\n      setDuration(video.duration);\n    };\n    const handleTimeUpdate = () => {\n      setCurrentTime(video.currentTime);\n    };\n    const handlePlay = () => {\n      console.log(\"Video playing\");\n      setIsPlaying(true);\n    };\n    const handlePause = () => {\n      setIsPlaying(false);\n    };\n    const handleError = e => {\n      console.error(\"Video error:\", e);\n      setError(\"Failed to load video\");\n      setIsLoading(false);\n    };\n    video.addEventListener(\"loadstart\", handleLoadStart);\n    video.addEventListener(\"canplay\", handleCanPlay);\n    video.addEventListener(\"loadedmetadata\", handleLoadedMetadata);\n    video.addEventListener(\"timeupdate\", handleTimeUpdate);\n    video.addEventListener(\"play\", handlePlay);\n    video.addEventListener(\"pause\", handlePause);\n    video.addEventListener(\"error\", handleError);\n    return () => {\n      video.removeEventListener(\"loadstart\", handleLoadStart);\n      video.removeEventListener(\"canplay\", handleCanPlay);\n      video.removeEventListener(\"loadedmetadata\", handleLoadedMetadata);\n      video.removeEventListener(\"timeupdate\", handleTimeUpdate);\n      video.removeEventListener(\"play\", handlePlay);\n      video.removeEventListener(\"pause\", handlePause);\n      video.removeEventListener(\"error\", handleError);\n    };\n  }, []);\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"video-player video-player--error\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"video-player__error\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"video-player__error-icon\",\n          children: \"\\u26A0\\uFE0F\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Video unavailable\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"video-player__debug\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Debug Info:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Original URL: \", videoUrl]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Full URL: \", fullVideoUrl]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"video-player__retry-btn\",\n          onClick: () => {\n            setError(null);\n            setIsLoading(true);\n            if (videoRef.current) {\n              videoRef.current.load();\n            }\n          },\n          children: \"Retry\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"video-player\",\n    children: [isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"video-player__loading\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"video-player__spinner\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading video...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"video\", {\n      ref: videoRef,\n      className: \"video-player__video\",\n      src: fullVideoUrl,\n      poster: fullThumbnailUrl,\n      controls: true,\n      preload: \"metadata\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 167,\n    columnNumber: 5\n  }, this);\n};\n_s(VideoPlayer, \"MUS6IsaylIpiMw2X589q/4dYGjY=\");\n_c = VideoPlayer;\nexport default VideoPlayer;\nvar _c;\n$RefreshReg$(_c, \"VideoPlayer\");","map":{"version":3,"names":["_jsxFileName","_s","$RefreshSig$","useState","useRef","useEffect","jsxDEV","_jsxDEV","VideoPlayer","videoUrl","thumbnailUrl","title","isPlaying","setIsPlaying","currentTime","setCurrentTime","duration","setDuration","volume","setVolume","isLoading","setIsLoading","error","setError","videoRef","getFullVideoUrl","startsWith","baseUrl","getFullThumbnailUrl","fullVideoUrl","fullThumbnailUrl","console","log","video","current","handleLoadStart","handleCanPlay","handleLoadedMetadata","handleTimeUpdate","handlePlay","handlePause","handleError","e","addEventListener","removeEventListener","className","children","fileName","lineNumber","columnNumber","onClick","load","ref","src","poster","controls","preload","_c","$RefreshReg$"],"sources":["/Users/sonamzangmo/Downloads/youtube-clone/frontend/src/components/videos/VideoPlayer.jsx"],"sourcesContent":["\"use client\"\n\nimport { useState, useRef, useEffect } from \"react\"\nimport \"./VideoPlayer.css\"\n\nconst VideoPlayer = ({ videoUrl, thumbnailUrl, title }) => {\n  const [isPlaying, setIsPlaying] = useState(false)\n  const [currentTime, setCurrentTime] = useState(0)\n  const [duration, setDuration] = useState(0)\n  const [volume, setVolume] = useState(1)\n  const [isLoading, setIsLoading] = useState(true)\n  const [error, setError] = useState(null)\n\n  const videoRef = useRef(null)\n\n  // Get the correct video URL with port 5001\n  const getFullVideoUrl = () => {\n    if (!videoUrl) return \"\"\n\n    // If it's already a full URL, return it\n    if (videoUrl.startsWith(\"http\")) {\n      return videoUrl\n    }\n\n    // Build the full URL with port 5001\n    const baseUrl = \"http://localhost:5001\"\n\n    // If the URL starts with /uploads, it's a local file\n    if (videoUrl.startsWith(\"/uploads\")) {\n      return `${baseUrl}${videoUrl}`\n    }\n\n    // If the URL starts with uploads, it's a local file without leading slash\n    if (videoUrl.startsWith(\"uploads\")) {\n      return `${baseUrl}/${videoUrl}`\n    }\n\n    // Otherwise, assume it's just the filename\n    return `${baseUrl}/uploads/videos/${videoUrl}`\n  }\n\n  // Get the correct thumbnail URL with port 5001\n  const getFullThumbnailUrl = () => {\n    if (!thumbnailUrl) return \"\"\n\n    // If it's already a full URL, return it\n    if (thumbnailUrl.startsWith(\"http\")) {\n      return thumbnailUrl\n    }\n\n    // Build the full URL with port 5001\n    const baseUrl = \"http://localhost:5001\"\n\n    // If the URL starts with /uploads, it's a local file\n    if (thumbnailUrl.startsWith(\"/uploads\")) {\n      return `${baseUrl}${thumbnailUrl}`\n    }\n\n    // If the URL starts with uploads, it's a local file without leading slash\n    if (thumbnailUrl.startsWith(\"uploads\")) {\n      return `${baseUrl}/${thumbnailUrl}`\n    }\n\n    // Otherwise, assume it's just the filename\n    return `${baseUrl}/uploads/thumbnails/${thumbnailUrl}`\n  }\n\n  const fullVideoUrl = getFullVideoUrl()\n  const fullThumbnailUrl = getFullThumbnailUrl()\n\n  // Debug logging\n  useEffect(() => {\n    console.log(\"Video URL:\", videoUrl)\n    console.log(\"Full video URL:\", fullVideoUrl)\n    console.log(\"Thumbnail URL:\", thumbnailUrl)\n    console.log(\"Full thumbnail URL:\", fullThumbnailUrl)\n  }, [videoUrl, thumbnailUrl, fullVideoUrl, fullThumbnailUrl])\n\n  // Handle video events\n  useEffect(() => {\n    const video = videoRef.current\n    if (!video) return\n\n    const handleLoadStart = () => {\n      console.log(\"Video load started\")\n      setIsLoading(true)\n    }\n\n    const handleCanPlay = () => {\n      console.log(\"Video can play\")\n      setIsLoading(false)\n    }\n\n    const handleLoadedMetadata = () => {\n      console.log(\"Video metadata loaded\")\n      setDuration(video.duration)\n    }\n\n    const handleTimeUpdate = () => {\n      setCurrentTime(video.currentTime)\n    }\n\n    const handlePlay = () => {\n      console.log(\"Video playing\")\n      setIsPlaying(true)\n    }\n\n    const handlePause = () => {\n      setIsPlaying(false)\n    }\n\n    const handleError = (e) => {\n      console.error(\"Video error:\", e)\n      setError(\"Failed to load video\")\n      setIsLoading(false)\n    }\n\n    video.addEventListener(\"loadstart\", handleLoadStart)\n    video.addEventListener(\"canplay\", handleCanPlay)\n    video.addEventListener(\"loadedmetadata\", handleLoadedMetadata)\n    video.addEventListener(\"timeupdate\", handleTimeUpdate)\n    video.addEventListener(\"play\", handlePlay)\n    video.addEventListener(\"pause\", handlePause)\n    video.addEventListener(\"error\", handleError)\n\n    return () => {\n      video.removeEventListener(\"loadstart\", handleLoadStart)\n      video.removeEventListener(\"canplay\", handleCanPlay)\n      video.removeEventListener(\"loadedmetadata\", handleLoadedMetadata)\n      video.removeEventListener(\"timeupdate\", handleTimeUpdate)\n      video.removeEventListener(\"play\", handlePlay)\n      video.removeEventListener(\"pause\", handlePause)\n      video.removeEventListener(\"error\", handleError)\n    }\n  }, [])\n\n  if (error) {\n    return (\n      <div className=\"video-player video-player--error\">\n        <div className=\"video-player__error\">\n          <div className=\"video-player__error-icon\">⚠️</div>\n          <h3>Video unavailable</h3>\n          <p>{error}</p>\n          <div className=\"video-player__debug\">\n            <p>Debug Info:</p>\n            <p>Original URL: {videoUrl}</p>\n            <p>Full URL: {fullVideoUrl}</p>\n          </div>\n          <button\n            className=\"video-player__retry-btn\"\n            onClick={() => {\n              setError(null)\n              setIsLoading(true)\n              if (videoRef.current) {\n                videoRef.current.load()\n              }\n            }}\n          >\n            Retry\n          </button>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"video-player\">\n      {isLoading && (\n        <div className=\"video-player__loading\">\n          <div className=\"video-player__spinner\"></div>\n          <p>Loading video...</p>\n        </div>\n      )}\n\n      <video\n        ref={videoRef}\n        className=\"video-player__video\"\n        src={fullVideoUrl}\n        poster={fullThumbnailUrl}\n        controls\n        preload=\"metadata\"\n      />\n    </div>\n  )\n}\n\nexport default VideoPlayer\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
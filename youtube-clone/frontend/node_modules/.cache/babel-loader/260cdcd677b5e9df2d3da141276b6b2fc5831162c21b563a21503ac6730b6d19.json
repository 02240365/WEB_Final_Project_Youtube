{"ast":null,"code":"// api.js - API service functions with better error handling\n// Contains all API calls for videos, channels, comments, etc.\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || \"http://localhost:5001/api\";\nconst UPLOAD_URL = process.env.REACT_APP_UPLOAD_URL || \"http://localhost:5001/uploads\";\nconsole.log(\"API Base URL:\", API_BASE_URL); // Debug log\nconsole.log(\"Upload URL:\", UPLOAD_URL); // Debug log\n\n// Helper function to get auth headers\nconst getAuthHeaders = () => {\n  const token = localStorage.getItem(\"authToken\");\n  return {\n    \"Content-Type\": \"application/json\",\n    ...(token && {\n      Authorization: `Bearer ${token}`\n    })\n  };\n};\n\n// Helper function to handle API responses\nconst handleResponse = async response => {\n  if (!response.ok) {\n    const error = await response.json().catch(() => ({\n      message: \"Network error\"\n    }));\n    throw new Error(error.message || `HTTP error! status: ${response.status}`);\n  }\n  const data = await response.json();\n  return data.data || data; // Handle both {data: []} and direct array responses\n};\n\n// Video API functions\nexport const fetchVideos = async (params = {}) => {\n  try {\n    console.log(\"Fetching videos with params:\", params);\n    const queryParams = new URLSearchParams();\n\n    // Add query parameters\n    if (params.category) queryParams.append(\"category\", params.category);\n    if (params.limit) queryParams.append(\"limit\", params.limit);\n    if (params.offset) queryParams.append(\"offset\", params.offset);\n    if (params.search) queryParams.append(\"search\", params.search);\n    if (params.channelId) queryParams.append(\"channelId\", params.channelId);\n    const url = `${API_BASE_URL}/videos?${queryParams}`;\n    console.log(\"Fetching from URL:\", url);\n    const response = await fetch(url, {\n      headers: getAuthHeaders()\n    });\n    console.log(\"Response status:\", response.status);\n    const data = await handleResponse(response);\n\n    // Process video URLs to ensure they have the correct base URL\n    if (Array.isArray(data)) {\n      data.forEach(video => {\n        if (video.videoUrl && !video.videoUrl.includes(\"http\")) {\n          video.videoUrl = `${UPLOAD_URL}/${video.videoUrl.replace(/^\\//, \"\")}`;\n        }\n        if (video.thumbnailUrl && !video.thumbnailUrl.includes(\"http\")) {\n          video.thumbnailUrl = `${UPLOAD_URL}/${video.thumbnailUrl.replace(/^\\//, \"\")}`;\n        }\n      });\n    }\n    console.log(\"Fetched videos:\", data);\n    return data;\n  } catch (error) {\n    console.error(\"Error fetching videos:\", error);\n    throw error;\n  }\n};\nexport const fetchVideoById = async videoId => {\n  try {\n    console.log(\"Fetching video by ID:\", videoId);\n    const url = `${API_BASE_URL}/videos/${videoId}`;\n    console.log(\"Fetching from URL:\", url);\n    const response = await fetch(url, {\n      headers: getAuthHeaders()\n    });\n    console.log(\"Response status:\", response.status);\n    const data = await handleResponse(response);\n    console.log(\"Fetched video:\", data);\n    return data;\n  } catch (error) {\n    console.error(\"Error fetching video:\", error);\n    throw error;\n  }\n};\nexport const fetchRelatedVideos = async videoId => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/videos/${videoId}/related`, {\n      headers: getAuthHeaders()\n    });\n    return handleResponse(response);\n  } catch (error) {\n    console.error(\"Error fetching related videos:\", error);\n    throw error;\n  }\n};\nexport const uploadVideo = async videoData => {\n  try {\n    const formData = new FormData();\n\n    // Append video file\n    formData.append(\"video\", videoData.videoFile);\n\n    // Append thumbnail if provided\n    if (videoData.thumbnail) {\n      formData.append(\"thumbnail\", videoData.thumbnail);\n    }\n\n    // Append other data\n    formData.append(\"title\", videoData.title);\n    formData.append(\"description\", videoData.description);\n    formData.append(\"category\", videoData.category);\n    formData.append(\"tags\", JSON.stringify(videoData.tags));\n    const token = localStorage.getItem(\"authToken\");\n    const response = await fetch(`${API_BASE_URL}/videos/upload`, {\n      method: \"POST\",\n      headers: {\n        ...(token && {\n          Authorization: `Bearer ${token}`\n        })\n      },\n      body: formData\n    });\n    return handleResponse(response);\n  } catch (error) {\n    console.error(\"Error uploading video:\", error);\n    throw error;\n  }\n};\nexport const likeVideo = async (videoId, isLike) => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/videos/${videoId}/like`, {\n      method: \"POST\",\n      headers: getAuthHeaders(),\n      body: JSON.stringify({\n        isLike\n      })\n    });\n    return handleResponse(response);\n  } catch (error) {\n    console.error(\"Error liking video:\", error);\n    throw error;\n  }\n};\n\n// Channel API functions\nexport const fetchChannels = async channelIds => {\n  try {\n    console.log(\"Fetching channels for IDs:\", channelIds);\n    const queryParams = new URLSearchParams();\n    channelIds.forEach(id => queryParams.append(\"ids\", id));\n    const url = `${API_BASE_URL}/channels?${queryParams}`;\n    console.log(\"Fetching from URL:\", url);\n    const response = await fetch(url, {\n      headers: getAuthHeaders()\n    });\n    console.log(\"Response status:\", response.status);\n    const data = await handleResponse(response);\n    console.log(\"Fetched channels:\", data);\n    return data;\n  } catch (error) {\n    console.error(\"Error fetching channels:\", error);\n    throw error;\n  }\n};\nexport const fetchChannelById = async channelId => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/channels/${channelId}`, {\n      headers: getAuthHeaders()\n    });\n    return handleResponse(response);\n  } catch (error) {\n    console.error(\"Error fetching channel:\", error);\n    throw error;\n  }\n};\nexport const subscribeToChannel = async (channelId, subscribe) => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/channels/${channelId}/subscribe`, {\n      method: \"POST\",\n      headers: getAuthHeaders(),\n      body: JSON.stringify({\n        subscribe\n      })\n    });\n    return handleResponse(response);\n  } catch (error) {\n    console.error(\"Error subscribing to channel:\", error);\n    throw error;\n  }\n};\n\n// Comment API functions\nexport const fetchVideoComments = async videoId => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/videos/${videoId}/comments`, {\n      headers: getAuthHeaders()\n    });\n    return handleResponse(response);\n  } catch (error) {\n    console.error(\"Error fetching comments:\", error);\n    throw error;\n  }\n};\nexport const addComment = async (videoId, text) => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/videos/${videoId}/comments`, {\n      method: \"POST\",\n      headers: getAuthHeaders(),\n      body: JSON.stringify({\n        text\n      })\n    });\n    return handleResponse(response);\n  } catch (error) {\n    console.error(\"Error adding comment:\", error);\n    throw error;\n  }\n};\n\n// Search API functions\nexport const searchVideos = async (query, filters = {}) => {\n  try {\n    const queryParams = new URLSearchParams();\n    queryParams.append(\"q\", query);\n\n    // Add filter parameters\n    if (filters.category) queryParams.append(\"category\", filters.category);\n    if (filters.duration) queryParams.append(\"duration\", filters.duration);\n    if (filters.uploadDate) queryParams.append(\"uploadDate\", filters.uploadDate);\n    if (filters.sortBy) queryParams.append(\"sortBy\", filters.sortBy);\n    const response = await fetch(`${API_BASE_URL}/search?${queryParams}`, {\n      headers: getAuthHeaders()\n    });\n    return handleResponse(response);\n  } catch (error) {\n    console.error(\"Error searching videos:\", error);\n    throw error;\n  }\n};\n\n// User API functions\nexport const fetchUserProfile = async userId => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/users/${userId}`, {\n      headers: getAuthHeaders()\n    });\n    return handleResponse(response);\n  } catch (error) {\n    console.error(\"Error fetching user profile:\", error);\n    throw error;\n  }\n};\nexport const updateUserProfile = async userData => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/users/profile`, {\n      method: \"PUT\",\n      headers: getAuthHeaders(),\n      body: JSON.stringify(userData)\n    });\n    return handleResponse(response);\n  } catch (error) {\n    console.error(\"Error updating user profile:\", error);\n    throw error;\n  }\n};\n\n// Health check function\nexport const checkApiHealth = async () => {\n  try {\n    const response = await fetch(`${API_BASE_URL.replace(\"/api\", \"\")}/health`);\n    return response.ok;\n  } catch (error) {\n    console.error(\"API health check failed:\", error);\n    return false;\n  }\n};","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_URL","UPLOAD_URL","REACT_APP_UPLOAD_URL","console","log","getAuthHeaders","token","localStorage","getItem","Authorization","handleResponse","response","ok","error","json","catch","message","Error","status","data","fetchVideos","params","queryParams","URLSearchParams","category","append","limit","offset","search","channelId","url","fetch","headers","Array","isArray","forEach","video","videoUrl","includes","replace","thumbnailUrl","fetchVideoById","videoId","fetchRelatedVideos","uploadVideo","videoData","formData","FormData","videoFile","thumbnail","title","description","JSON","stringify","tags","method","body","likeVideo","isLike","fetchChannels","channelIds","id","fetchChannelById","subscribeToChannel","subscribe","fetchVideoComments","addComment","text","searchVideos","query","filters","duration","uploadDate","sortBy","fetchUserProfile","userId","updateUserProfile","userData","checkApiHealth"],"sources":["/Users/sonamzangmo/Downloads/youtube-clone/frontend/src/services/api.js"],"sourcesContent":["// api.js - API service functions with better error handling\n// Contains all API calls for videos, channels, comments, etc.\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || \"http://localhost:5001/api\"\nconst UPLOAD_URL = process.env.REACT_APP_UPLOAD_URL || \"http://localhost:5001/uploads\"\n\nconsole.log(\"API Base URL:\", API_BASE_URL) // Debug log\nconsole.log(\"Upload URL:\", UPLOAD_URL) // Debug log\n\n// Helper function to get auth headers\nconst getAuthHeaders = () => {\n  const token = localStorage.getItem(\"authToken\")\n  return {\n    \"Content-Type\": \"application/json\",\n    ...(token && { Authorization: `Bearer ${token}` }),\n  }\n}\n\n// Helper function to handle API responses\nconst handleResponse = async (response) => {\n  if (!response.ok) {\n    const error = await response.json().catch(() => ({ message: \"Network error\" }))\n    throw new Error(error.message || `HTTP error! status: ${response.status}`)\n  }\n  const data = await response.json()\n  return data.data || data // Handle both {data: []} and direct array responses\n}\n\n// Video API functions\nexport const fetchVideos = async (params = {}) => {\n  try {\n    console.log(\"Fetching videos with params:\", params)\n\n    const queryParams = new URLSearchParams()\n\n    // Add query parameters\n    if (params.category) queryParams.append(\"category\", params.category)\n    if (params.limit) queryParams.append(\"limit\", params.limit)\n    if (params.offset) queryParams.append(\"offset\", params.offset)\n    if (params.search) queryParams.append(\"search\", params.search)\n    if (params.channelId) queryParams.append(\"channelId\", params.channelId)\n\n    const url = `${API_BASE_URL}/videos?${queryParams}`\n    console.log(\"Fetching from URL:\", url)\n\n    const response = await fetch(url, {\n      headers: getAuthHeaders(),\n    })\n\n    console.log(\"Response status:\", response.status)\n    const data = await handleResponse(response)\n\n    // Process video URLs to ensure they have the correct base URL\n    if (Array.isArray(data)) {\n      data.forEach((video) => {\n        if (video.videoUrl && !video.videoUrl.includes(\"http\")) {\n          video.videoUrl = `${UPLOAD_URL}/${video.videoUrl.replace(/^\\//, \"\")}`\n        }\n        if (video.thumbnailUrl && !video.thumbnailUrl.includes(\"http\")) {\n          video.thumbnailUrl = `${UPLOAD_URL}/${video.thumbnailUrl.replace(/^\\//, \"\")}`\n        }\n      })\n    }\n\n    console.log(\"Fetched videos:\", data)\n    return data\n  } catch (error) {\n    console.error(\"Error fetching videos:\", error)\n    throw error\n  }\n}\n\nexport const fetchVideoById = async (videoId) => {\n  try {\n    console.log(\"Fetching video by ID:\", videoId)\n\n    const url = `${API_BASE_URL}/videos/${videoId}`\n    console.log(\"Fetching from URL:\", url)\n\n    const response = await fetch(url, {\n      headers: getAuthHeaders(),\n    })\n\n    console.log(\"Response status:\", response.status)\n    const data = await handleResponse(response)\n    console.log(\"Fetched video:\", data)\n    return data\n  } catch (error) {\n    console.error(\"Error fetching video:\", error)\n    throw error\n  }\n}\n\nexport const fetchRelatedVideos = async (videoId) => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/videos/${videoId}/related`, {\n      headers: getAuthHeaders(),\n    })\n\n    return handleResponse(response)\n  } catch (error) {\n    console.error(\"Error fetching related videos:\", error)\n    throw error\n  }\n}\n\nexport const uploadVideo = async (videoData) => {\n  try {\n    const formData = new FormData()\n\n    // Append video file\n    formData.append(\"video\", videoData.videoFile)\n\n    // Append thumbnail if provided\n    if (videoData.thumbnail) {\n      formData.append(\"thumbnail\", videoData.thumbnail)\n    }\n\n    // Append other data\n    formData.append(\"title\", videoData.title)\n    formData.append(\"description\", videoData.description)\n    formData.append(\"category\", videoData.category)\n    formData.append(\"tags\", JSON.stringify(videoData.tags))\n\n    const token = localStorage.getItem(\"authToken\")\n    const response = await fetch(`${API_BASE_URL}/videos/upload`, {\n      method: \"POST\",\n      headers: {\n        ...(token && { Authorization: `Bearer ${token}` }),\n      },\n      body: formData,\n    })\n\n    return handleResponse(response)\n  } catch (error) {\n    console.error(\"Error uploading video:\", error)\n    throw error\n  }\n}\n\nexport const likeVideo = async (videoId, isLike) => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/videos/${videoId}/like`, {\n      method: \"POST\",\n      headers: getAuthHeaders(),\n      body: JSON.stringify({ isLike }),\n    })\n\n    return handleResponse(response)\n  } catch (error) {\n    console.error(\"Error liking video:\", error)\n    throw error\n  }\n}\n\n// Channel API functions\nexport const fetchChannels = async (channelIds) => {\n  try {\n    console.log(\"Fetching channels for IDs:\", channelIds)\n\n    const queryParams = new URLSearchParams()\n    channelIds.forEach((id) => queryParams.append(\"ids\", id))\n\n    const url = `${API_BASE_URL}/channels?${queryParams}`\n    console.log(\"Fetching from URL:\", url)\n\n    const response = await fetch(url, {\n      headers: getAuthHeaders(),\n    })\n\n    console.log(\"Response status:\", response.status)\n    const data = await handleResponse(response)\n    console.log(\"Fetched channels:\", data)\n    return data\n  } catch (error) {\n    console.error(\"Error fetching channels:\", error)\n    throw error\n  }\n}\n\nexport const fetchChannelById = async (channelId) => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/channels/${channelId}`, {\n      headers: getAuthHeaders(),\n    })\n\n    return handleResponse(response)\n  } catch (error) {\n    console.error(\"Error fetching channel:\", error)\n    throw error\n  }\n}\n\nexport const subscribeToChannel = async (channelId, subscribe) => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/channels/${channelId}/subscribe`, {\n      method: \"POST\",\n      headers: getAuthHeaders(),\n      body: JSON.stringify({ subscribe }),\n    })\n\n    return handleResponse(response)\n  } catch (error) {\n    console.error(\"Error subscribing to channel:\", error)\n    throw error\n  }\n}\n\n// Comment API functions\nexport const fetchVideoComments = async (videoId) => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/videos/${videoId}/comments`, {\n      headers: getAuthHeaders(),\n    })\n\n    return handleResponse(response)\n  } catch (error) {\n    console.error(\"Error fetching comments:\", error)\n    throw error\n  }\n}\n\nexport const addComment = async (videoId, text) => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/videos/${videoId}/comments`, {\n      method: \"POST\",\n      headers: getAuthHeaders(),\n      body: JSON.stringify({ text }),\n    })\n\n    return handleResponse(response)\n  } catch (error) {\n    console.error(\"Error adding comment:\", error)\n    throw error\n  }\n}\n\n// Search API functions\nexport const searchVideos = async (query, filters = {}) => {\n  try {\n    const queryParams = new URLSearchParams()\n    queryParams.append(\"q\", query)\n\n    // Add filter parameters\n    if (filters.category) queryParams.append(\"category\", filters.category)\n    if (filters.duration) queryParams.append(\"duration\", filters.duration)\n    if (filters.uploadDate) queryParams.append(\"uploadDate\", filters.uploadDate)\n    if (filters.sortBy) queryParams.append(\"sortBy\", filters.sortBy)\n\n    const response = await fetch(`${API_BASE_URL}/search?${queryParams}`, {\n      headers: getAuthHeaders(),\n    })\n\n    return handleResponse(response)\n  } catch (error) {\n    console.error(\"Error searching videos:\", error)\n    throw error\n  }\n}\n\n// User API functions\nexport const fetchUserProfile = async (userId) => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/users/${userId}`, {\n      headers: getAuthHeaders(),\n    })\n\n    return handleResponse(response)\n  } catch (error) {\n    console.error(\"Error fetching user profile:\", error)\n    throw error\n  }\n}\n\nexport const updateUserProfile = async (userData) => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/users/profile`, {\n      method: \"PUT\",\n      headers: getAuthHeaders(),\n      body: JSON.stringify(userData),\n    })\n\n    return handleResponse(response)\n  } catch (error) {\n    console.error(\"Error updating user profile:\", error)\n    throw error\n  }\n}\n\n// Health check function\nexport const checkApiHealth = async () => {\n  try {\n    const response = await fetch(`${API_BASE_URL.replace(\"/api\", \"\")}/health`)\n    return response.ok\n  } catch (error) {\n    console.error(\"API health check failed:\", error)\n    return false\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
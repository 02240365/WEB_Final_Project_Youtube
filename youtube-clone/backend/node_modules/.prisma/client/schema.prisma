// schema.prisma - Database schema definition
// Defines all database models and relationships

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model - represents both regular users and content creators
model User {
  id             String   @id @default(cuid())
  email          String   @unique
  username       String   @unique
  firstName      String
  lastName       String
  profilePicture String?
  bannerImage    String?
  description    String?
  isCreator      Boolean  @default(false)
  verified       Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Password and authentication
  password      String
  refreshTokens RefreshToken[]

  // Channel information (for creators)
  channelName String?
  subscribers Int     @default(0)
  totalViews  Int     @default(0)

  // Relationships
  videos          Video[]
  comments        Comment[]
  likes           Like[]
  subscriptions   Subscription[] @relation("UserSubscriptions")
  subscribers_rel Subscription[] @relation("ChannelSubscribers")
  watchHistory    WatchHistory[]
  playlists       Playlist[]

  @@map("users")
}

// RefreshToken model - for JWT token management
model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())

  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

// Video model - represents uploaded videos
model Video {
  id           String   @id @default(cuid())
  title        String
  description  String?
  thumbnailUrl String?
  videoUrl     String
  duration     String?
  views        Int      @default(0)
  likes        Int      @default(0)
  dislikes     Int      @default(0)
  category     String
  tags         String[]
  isPublic     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Foreign keys
  userId String

  // Relationships
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments      Comment[]
  likes_rel     Like[]
  watchHistory  WatchHistory[]
  playlistItems PlaylistItem[]

  @@map("videos")
}

// Comment model - represents video comments
model Comment {
  id        String   @id @default(cuid())
  text      String
  likes     Int      @default(0)
  dislikes  Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Foreign keys
  userId   String
  videoId  String
  parentId String? // For reply comments

  // Relationships
  user    User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  video   Video     @relation(fields: [videoId], references: [id], onDelete: Cascade)
  parent  Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies Comment[] @relation("CommentReplies")

  @@map("comments")
}

// Like model - represents likes/dislikes on videos
model Like {
  id        String   @id @default(cuid())
  isLike    Boolean // true for like, false for dislike
  createdAt DateTime @default(now())

  // Foreign keys
  userId  String
  videoId String

  // Relationships
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  video Video @relation(fields: [videoId], references: [id], onDelete: Cascade)

  // Ensure one like/dislike per user per video
  @@unique([userId, videoId])
  @@map("likes")
}

// Subscription model - represents channel subscriptions
model Subscription {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  // Foreign keys
  userId    String // The user who is subscribing
  channelId String // The channel being subscribed to

  // Relationships
  user    User @relation("UserSubscriptions", fields: [userId], references: [id], onDelete: Cascade)
  channel User @relation("ChannelSubscribers", fields: [channelId], references: [id], onDelete: Cascade)

  // Ensure one subscription per user per channel
  @@unique([userId, channelId])
  @@map("subscriptions")
}

// WatchHistory model - tracks user's video watch history
model WatchHistory {
  id        String   @id @default(cuid())
  watchedAt DateTime @default(now())
  watchTime Int      @default(0) // Time watched in seconds

  // Foreign keys
  userId  String
  videoId String

  // Relationships
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  video Video @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@map("watch_history")
}

// Playlist model - represents user-created playlists
model Playlist {
  id          String   @id @default(cuid())
  title       String
  description String?
  isPublic    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Foreign keys
  userId String

  // Relationships
  user  User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  items PlaylistItem[]

  @@map("playlists")
}

// PlaylistItem model - represents videos in playlists
model PlaylistItem {
  id       String   @id @default(cuid())
  position Int // Order in playlist
  addedAt  DateTime @default(now())

  // Foreign keys
  playlistId String
  videoId    String

  // Relationships
  playlist Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
  video    Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)

  // Ensure unique position per playlist
  @@unique([playlistId, position])
  @@map("playlist_items")
}

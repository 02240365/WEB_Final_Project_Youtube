{"ast":null,"code":"\"use client\";\n\nvar _jsxFileName = \"/Users/sonamzangmo/Desktop/WEB_Final_Project_Youtube/youtube-clone/frontend/src/pages/Home.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport \"./Home.css\";\nimport VideoCard from \"../components/videos/VideoCard\";\nimport { fetchVideos, fetchChannels } from \"../services/api\";\nimport { toast } from \"react-toastify\";\n\n// Category filter options\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst categories = [\"All\", \"Music\", \"Gaming\", \"News\", \"Sports\", \"Entertainment\", \"Education\", \"Science & Technology\", \"Comedy\", \"Movies\", \"Anime\", \"Cooking\", \"Travel\", \"Fashion\", \"Fitness\"];\nfunction Home() {\n  _s();\n  const [videos, setVideos] = useState([]);\n  const [channels, setChannels] = useState({});\n  const [selectedCategory, setSelectedCategory] = useState(\"All\");\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Fetch videos and channel data on component mount\n  useEffect(() => {\n    loadVideos();\n  }, [selectedCategory]);\n  const loadVideos = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      // Fetch videos based on selected category\n      const videosData = await fetchVideos({\n        category: selectedCategory === \"All\" ? undefined : selectedCategory,\n        limit: 20\n      });\n      setVideos(videosData);\n\n      // Fetch channel data for all videos\n      const channelIds = [...new Set(videosData.map(video => video.channelId))];\n      const channelsData = await fetchChannels(channelIds);\n\n      // Convert array to object for easier lookup\n      const channelsMap = {};\n      channelsData.forEach(channel => {\n        channelsMap[channel.id] = channel;\n      });\n      setChannels(channelsMap);\n    } catch (error) {\n      console.error(\"Error loading videos:\", error);\n      setError(\"Failed to load videos. Please try again.\");\n      toast.error(\"Failed to load videos\");\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Handle category selection\n  const handleCategorySelect = category => {\n    setSelectedCategory(category);\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"home\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"home__loading\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"home__loading-spinner\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Loading videos...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"home\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"home__error\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: loadVideos,\n          className: \"home__retry-btn\",\n          children: \"Try Again\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"home\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"home__categories\",\n      children: categories.map(category => /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `home__category-btn ${selectedCategory === category ? \"home__category-btn--active\" : \"\"}`,\n        onClick: () => handleCategorySelect(category),\n        children: category\n      }, category, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"home__videos\",\n      children: videos.length > 0 ? videos.map(video => /*#__PURE__*/_jsxDEV(VideoCard, {\n        video: video,\n        channelData: channels[video.channelId] || {},\n        layout: \"grid\"\n      }, video.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 13\n      }, this)) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"home__no-videos\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No videos found for this category.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 5\n  }, this);\n}\n_s(Home, \"05LH8a4HxIVqsI2yPOkh/lGbVF4=\");\n_c = Home;\nexport default Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["_jsxFileName","_s","$RefreshSig$","useState","useEffect","VideoCard","fetchVideos","fetchChannels","toast","jsxDEV","_jsxDEV","categories","Home","videos","setVideos","channels","setChannels","selectedCategory","setSelectedCategory","loading","setLoading","error","setError","loadVideos","videosData","category","undefined","limit","channelIds","Set","map","video","channelId","channelsData","channelsMap","forEach","channel","id","console","handleCategorySelect","className","children","fileName","lineNumber","columnNumber","onClick","length","channelData","layout","_c","$RefreshReg$"],"sources":["/Users/sonamzangmo/Desktop/WEB_Final_Project_Youtube/youtube-clone/frontend/src/pages/Home.js"],"sourcesContent":["\"use client\"\n\nimport { useState, useEffect } from \"react\"\nimport \"./Home.css\"\nimport VideoCard from \"../components/videos/VideoCard\"\nimport { fetchVideos, fetchChannels } from \"../services/api\"\nimport { toast } from \"react-toastify\"\n\n// Category filter options\nconst categories = [\n  \"All\",\n  \"Music\",\n  \"Gaming\",\n  \"News\",\n  \"Sports\",\n  \"Entertainment\",\n  \"Education\",\n  \"Science & Technology\",\n  \"Comedy\",\n  \"Movies\",\n  \"Anime\",\n  \"Cooking\",\n  \"Travel\",\n  \"Fashion\",\n  \"Fitness\",\n]\n\nfunction Home() {\n  const [videos, setVideos] = useState([])\n  const [channels, setChannels] = useState({})\n  const [selectedCategory, setSelectedCategory] = useState(\"All\")\n  const [loading, setLoading] = useState(true)\n  const [error, setError] = useState(null)\n\n  // Fetch videos and channel data on component mount\n  useEffect(() => {\n    loadVideos()\n  }, [selectedCategory])\n\n  const loadVideos = async () => {\n    try {\n      setLoading(true)\n      setError(null)\n\n      // Fetch videos based on selected category\n      const videosData = await fetchVideos({\n        category: selectedCategory === \"All\" ? undefined : selectedCategory,\n        limit: 20,\n      })\n\n      setVideos(videosData)\n\n      // Fetch channel data for all videos\n      const channelIds = [...new Set(videosData.map((video) => video.channelId))]\n      const channelsData = await fetchChannels(channelIds)\n\n      // Convert array to object for easier lookup\n      const channelsMap = {}\n      channelsData.forEach((channel) => {\n        channelsMap[channel.id] = channel\n      })\n\n      setChannels(channelsMap)\n    } catch (error) {\n      console.error(\"Error loading videos:\", error)\n      setError(\"Failed to load videos. Please try again.\")\n      toast.error(\"Failed to load videos\")\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  // Handle category selection\n  const handleCategorySelect = (category) => {\n    setSelectedCategory(category)\n  }\n\n  if (loading) {\n    return (\n      <div className=\"home\">\n        <div className=\"home__loading\">\n          <div className=\"home__loading-spinner\"></div>\n          <p>Loading videos...</p>\n        </div>\n      </div>\n    )\n  }\n\n  if (error) {\n    return (\n      <div className=\"home\">\n        <div className=\"home__error\">\n          <p>{error}</p>\n          <button onClick={loadVideos} className=\"home__retry-btn\">\n            Try Again\n          </button>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"home\">\n      {/* Category filter */}\n      <div className=\"home__categories\">\n        {categories.map((category) => (\n          <button\n            key={category}\n            className={`home__category-btn ${selectedCategory === category ? \"home__category-btn--active\" : \"\"}`}\n            onClick={() => handleCategorySelect(category)}\n          >\n            {category}\n          </button>\n        ))}\n      </div>\n\n      {/* Videos grid */}\n      <div className=\"home__videos\">\n        {videos.length > 0 ? (\n          videos.map((video) => (\n            <VideoCard key={video.id} video={video} channelData={channels[video.channelId] || {}} layout=\"grid\" />\n          ))\n        ) : (\n          <div className=\"home__no-videos\">\n            <p>No videos found for this category.</p>\n          </div>\n        )}\n      </div>\n    </div>\n  )\n}\n\nexport default Home\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"// api.js - API service functions with infinite scrolling support\n// Contains all API calls for videos, channels, comments, etc.\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || \"http://localhost:5001/api\";\nconst UPLOAD_URL = process.env.REACT_APP_UPLOAD_URL || \"http://localhost:5001/uploads\";\nconsole.log(\"API Base URL:\", API_BASE_URL); // Debug log\nconsole.log(\"Upload URL:\", UPLOAD_URL); // Debug log\n\n// Helper function to get auth headers\nconst getAuthHeaders = () => {\n  const token = localStorage.getItem(\"authToken\");\n  return {\n    \"Content-Type\": \"application/json\",\n    ...(token && {\n      Authorization: `Bearer ${token}`\n    })\n  };\n};\n\n// Helper function to handle API responses\nconst handleResponse = async response => {\n  if (!response.ok) {\n    const error = await response.json().catch(() => ({\n      message: \"Network error\"\n    }));\n    throw new Error(error.message || `HTTP error! status: ${response.status}`);\n  }\n  const data = await response.json();\n  return data; // Return full response including pagination info\n};\n\n// Video API functions with infinite scrolling support\nexport const fetchVideos = async (params = {}) => {\n  try {\n    var _result$data;\n    console.log(\"Fetching videos with params:\", params);\n    const queryParams = new URLSearchParams();\n\n    // Add query parameters\n    if (params.category) queryParams.append(\"category\", params.category);\n    if (params.limit) queryParams.append(\"limit\", params.limit);\n    if (params.offset) queryParams.append(\"offset\", params.offset);\n    if (params.search) queryParams.append(\"search\", params.search);\n    if (params.channelId) queryParams.append(\"channelId\", params.channelId);\n    if (params.sortBy) queryParams.append(\"sortBy\", params.sortBy);\n    const url = `${API_BASE_URL}/videos?${queryParams}`;\n    console.log(\"Fetching from URL:\", url);\n    const response = await fetch(url, {\n      headers: getAuthHeaders()\n    });\n    console.log(\"Response status:\", response.status);\n    const result = await handleResponse(response);\n\n    // Process video URLs to ensure they have the correct base URL\n    if (result.data && Array.isArray(result.data)) {\n      result.data.forEach(video => {\n        if (video.videoUrl && !video.videoUrl.includes(\"http\")) {\n          video.videoUrl = `${UPLOAD_URL}/${video.videoUrl.replace(/^\\//, \"\")}`;\n        }\n        if (video.thumbnailUrl && !video.thumbnailUrl.includes(\"http\")) {\n          video.thumbnailUrl = `${UPLOAD_URL}/${video.thumbnailUrl.replace(/^\\//, \"\")}`;\n        }\n      });\n    }\n    console.log(\"Fetched videos:\", ((_result$data = result.data) === null || _result$data === void 0 ? void 0 : _result$data.length) || 0, \"videos\");\n    console.log(\"Pagination info:\", result.pagination);\n    return result; // Return full result with pagination\n  } catch (error) {\n    console.error(\"Error fetching videos:\", error);\n    throw error;\n  }\n};\n\n// Fetch videos with infinite scroll support\nexport const fetchVideosInfinite = async (params = {}) => {\n  try {\n    var _result$pagination, _result$pagination2;\n    const defaultParams = {\n      limit: 12,\n      // Default page size for infinite scroll\n      offset: 0,\n      sortBy: \"createdAt\",\n      ...params\n    };\n    const result = await fetchVideos(defaultParams);\n    return {\n      videos: result.data || [],\n      pagination: result.pagination || {},\n      hasMore: ((_result$pagination = result.pagination) === null || _result$pagination === void 0 ? void 0 : _result$pagination.hasMore) || false,\n      nextOffset: ((_result$pagination2 = result.pagination) === null || _result$pagination2 === void 0 ? void 0 : _result$pagination2.nextOffset) || null\n    };\n  } catch (error) {\n    console.error(\"Error fetching videos for infinite scroll:\", error);\n    throw error;\n  }\n};\nexport const fetchVideoById = async videoId => {\n  try {\n    console.log(\"Fetching video by ID:\", videoId);\n    const url = `${API_BASE_URL}/videos/${videoId}`;\n    console.log(\"Fetching from URL:\", url);\n    const response = await fetch(url, {\n      headers: getAuthHeaders()\n    });\n    console.log(\"Response status:\", response.status);\n    const result = await handleResponse(response);\n    console.log(\"Fetched video:\", result.data);\n    return result.data;\n  } catch (error) {\n    console.error(\"Error fetching video:\", error);\n    throw error;\n  }\n};\nexport const fetchRelatedVideos = async (videoId, params = {}) => {\n  try {\n    const queryParams = new URLSearchParams();\n    if (params.limit) queryParams.append(\"limit\", params.limit);\n    if (params.offset) queryParams.append(\"offset\", params.offset);\n    const response = await fetch(`${API_BASE_URL}/videos/${videoId}/related?${queryParams}`, {\n      headers: getAuthHeaders()\n    });\n    const result = await handleResponse(response);\n    return result.data || [];\n  } catch (error) {\n    console.error(\"Error fetching related videos:\", error);\n    throw error;\n  }\n};\n\n// Upload video with thumbnail\nexport const uploadVideo = async videoData => {\n  try {\n    console.log(\"Uploading video:\", videoData.title);\n    const formData = new FormData();\n\n    // Append video file\n    formData.append(\"video\", videoData.videoFile);\n\n    // Append thumbnail if provided\n    if (videoData.thumbnail) {\n      formData.append(\"thumbnail\", videoData.thumbnail);\n    }\n\n    // Append other data\n    formData.append(\"title\", videoData.title);\n    formData.append(\"description\", videoData.description);\n    formData.append(\"category\", videoData.category);\n    formData.append(\"tags\", JSON.stringify(videoData.tags || []));\n    formData.append(\"isPublic\", videoData.isPublic !== false);\n    const token = localStorage.getItem(\"authToken\");\n    const response = await fetch(`${API_BASE_URL}/videos/upload`, {\n      method: \"POST\",\n      headers: {\n        ...(token && {\n          Authorization: `Bearer ${token}`\n        })\n      },\n      body: formData\n    });\n    const result = await handleResponse(response);\n    console.log(\"Video uploaded successfully:\", result.data);\n    return result.data;\n  } catch (error) {\n    console.error(\"Error uploading video:\", error);\n    throw error;\n  }\n};\n\n// Like or dislike a video\nexport const likeVideo = async (videoId, isLike) => {\n  try {\n    console.log(`${isLike ? \"Liking\" : \"Disliking\"} video:`, videoId);\n    const response = await fetch(`${API_BASE_URL}/videos/${videoId}/like`, {\n      method: \"POST\",\n      headers: getAuthHeaders(),\n      body: JSON.stringify({\n        isLike\n      })\n    });\n    const result = await handleResponse(response);\n    console.log(\"Like action successful:\", result.data);\n    return result.data;\n  } catch (error) {\n    console.error(\"Error liking video:\", error);\n    throw error;\n  }\n};\n\n// Channel API functions\nexport const fetchChannels = async channelIds => {\n  try {\n    console.log(\"Fetching channels for IDs:\", channelIds);\n    const queryParams = new URLSearchParams();\n    channelIds.forEach(id => queryParams.append(\"ids\", id));\n    const url = `${API_BASE_URL}/channels?${queryParams}`;\n    console.log(\"Fetching from URL:\", url);\n    const response = await fetch(url, {\n      headers: getAuthHeaders()\n    });\n    console.log(\"Response status:\", response.status);\n    const result = await handleResponse(response);\n    console.log(\"Fetched channels:\", result.data);\n    return result.data || result;\n  } catch (error) {\n    console.error(\"Error fetching channels:\", error);\n    throw error;\n  }\n};\nexport const fetchChannelById = async channelId => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/channels/${channelId}`, {\n      headers: getAuthHeaders()\n    });\n    const result = await handleResponse(response);\n    return result.data || result;\n  } catch (error) {\n    console.error(\"Error fetching channel:\", error);\n    throw error;\n  }\n};\n\n// Subscribe to a channel\nexport const subscribeToChannel = async (channelId, subscribe = true) => {\n  try {\n    console.log(`${subscribe ? \"Subscribing to\" : \"Unsubscribing from\"} channel:`, channelId);\n    const response = await fetch(`${API_BASE_URL}/channels/${channelId}/subscribe`, {\n      method: \"POST\",\n      headers: getAuthHeaders(),\n      body: JSON.stringify({\n        subscribe\n      })\n    });\n    const result = await handleResponse(response);\n    console.log(\"Subscription action successful:\", result.data);\n    return result.data || result;\n  } catch (error) {\n    console.error(\"Error with subscription:\", error);\n    throw error;\n  }\n};\n\n// Comment API functions\nexport const fetchVideoComments = async videoId => {\n  try {\n    console.log(\"Fetching comments for video:\", videoId);\n    const response = await fetch(`${API_BASE_URL}/videos/${videoId}/comments`, {\n      headers: getAuthHeaders()\n    });\n    const result = await handleResponse(response);\n    console.log(\"Fetched comments:\", result.data);\n    return result.data || result;\n  } catch (error) {\n    console.error(\"Error fetching comments:\", error);\n    throw error;\n  }\n};\nexport const addComment = async (videoId, text) => {\n  try {\n    console.log(\"Adding comment to video:\", videoId);\n    const response = await fetch(`${API_BASE_URL}/videos/${videoId}/comments`, {\n      method: \"POST\",\n      headers: getAuthHeaders(),\n      body: JSON.stringify({\n        text\n      })\n    });\n    const result = await handleResponse(response);\n    console.log(\"Comment added successfully:\", result.data);\n    return result.data || result;\n  } catch (error) {\n    console.error(\"Error adding comment:\", error);\n    throw error;\n  }\n};\n\n// Watch history\nexport const addToWatchHistory = async (videoId, watchTime = 0) => {\n  try {\n    console.log(\"Adding to watch history:\", videoId);\n    const response = await fetch(`${API_BASE_URL}/users/me/watch-history`, {\n      method: \"POST\",\n      headers: getAuthHeaders(),\n      body: JSON.stringify({\n        videoId,\n        watchTime\n      })\n    });\n    const result = await handleResponse(response);\n    console.log(\"Added to watch history:\", result.data);\n    return result.data || result;\n  } catch (error) {\n    console.error(\"Error adding to watch history:\", error);\n    // Don't throw error for watch history to prevent disrupting user experience\n    return null;\n  }\n};\n\n// Search API functions with pagination\nexport const searchVideos = async (query, filters = {}) => {\n  try {\n    const queryParams = new URLSearchParams();\n    queryParams.append(\"q\", query);\n\n    // Add filter parameters\n    if (filters.category) queryParams.append(\"category\", filters.category);\n    if (filters.duration) queryParams.append(\"duration\", filters.duration);\n    if (filters.uploadDate) queryParams.append(\"uploadDate\", filters.uploadDate);\n    if (filters.sortBy) queryParams.append(\"sortBy\", filters.sortBy);\n    if (filters.limit) queryParams.append(\"limit\", filters.limit);\n    if (filters.offset) queryParams.append(\"offset\", filters.offset);\n    const response = await fetch(`${API_BASE_URL}/search?${queryParams}`, {\n      headers: getAuthHeaders()\n    });\n    const result = await handleResponse(response);\n    return result;\n  } catch (error) {\n    console.error(\"Error searching videos:\", error);\n    throw error;\n  }\n};\n\n// User API functions\nexport const fetchUserProfile = async userId => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/users/${userId}`, {\n      headers: getAuthHeaders()\n    });\n    const result = await handleResponse(response);\n    return result.data || result;\n  } catch (error) {\n    console.error(\"Error fetching user profile:\", error);\n    throw error;\n  }\n};\nexport const updateUserProfile = async userData => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/users/profile`, {\n      method: \"PUT\",\n      headers: getAuthHeaders(),\n      body: JSON.stringify(userData)\n    });\n    const result = await handleResponse(response);\n    return result.data || result;\n  } catch (error) {\n    console.error(\"Error updating user profile:\", error);\n    throw error;\n  }\n};\n\n// Health check function\nexport const checkApiHealth = async () => {\n  try {\n    const response = await fetch(`${API_BASE_URL.replace(\"/api\", \"\")}/health`);\n    return response.ok;\n  } catch (error) {\n    console.error(\"API health check failed:\", error);\n    return false;\n  }\n};","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_URL","UPLOAD_URL","REACT_APP_UPLOAD_URL","console","log","getAuthHeaders","token","localStorage","getItem","Authorization","handleResponse","response","ok","error","json","catch","message","Error","status","data","fetchVideos","params","_result$data","queryParams","URLSearchParams","category","append","limit","offset","search","channelId","sortBy","url","fetch","headers","result","Array","isArray","forEach","video","videoUrl","includes","replace","thumbnailUrl","length","pagination","fetchVideosInfinite","_result$pagination","_result$pagination2","defaultParams","videos","hasMore","nextOffset","fetchVideoById","videoId","fetchRelatedVideos","uploadVideo","videoData","title","formData","FormData","videoFile","thumbnail","description","JSON","stringify","tags","isPublic","method","body","likeVideo","isLike","fetchChannels","channelIds","id","fetchChannelById","subscribeToChannel","subscribe","fetchVideoComments","addComment","text","addToWatchHistory","watchTime","searchVideos","query","filters","duration","uploadDate","fetchUserProfile","userId","updateUserProfile","userData","checkApiHealth"],"sources":["/Users/sonamzangmo/Desktop/WEB_Final_Project_Youtube/youtube-clone/frontend/src/services/api.js"],"sourcesContent":["// api.js - API service functions with infinite scrolling support\n// Contains all API calls for videos, channels, comments, etc.\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || \"http://localhost:5001/api\"\nconst UPLOAD_URL = process.env.REACT_APP_UPLOAD_URL || \"http://localhost:5001/uploads\"\n\nconsole.log(\"API Base URL:\", API_BASE_URL) // Debug log\nconsole.log(\"Upload URL:\", UPLOAD_URL) // Debug log\n\n// Helper function to get auth headers\nconst getAuthHeaders = () => {\n  const token = localStorage.getItem(\"authToken\")\n  return {\n    \"Content-Type\": \"application/json\",\n    ...(token && { Authorization: `Bearer ${token}` }),\n  }\n}\n\n// Helper function to handle API responses\nconst handleResponse = async (response) => {\n  if (!response.ok) {\n    const error = await response.json().catch(() => ({ message: \"Network error\" }))\n    throw new Error(error.message || `HTTP error! status: ${response.status}`)\n  }\n  const data = await response.json()\n  return data // Return full response including pagination info\n}\n\n// Video API functions with infinite scrolling support\nexport const fetchVideos = async (params = {}) => {\n  try {\n    console.log(\"Fetching videos with params:\", params)\n\n    const queryParams = new URLSearchParams()\n\n    // Add query parameters\n    if (params.category) queryParams.append(\"category\", params.category)\n    if (params.limit) queryParams.append(\"limit\", params.limit)\n    if (params.offset) queryParams.append(\"offset\", params.offset)\n    if (params.search) queryParams.append(\"search\", params.search)\n    if (params.channelId) queryParams.append(\"channelId\", params.channelId)\n    if (params.sortBy) queryParams.append(\"sortBy\", params.sortBy)\n\n    const url = `${API_BASE_URL}/videos?${queryParams}`\n    console.log(\"Fetching from URL:\", url)\n\n    const response = await fetch(url, {\n      headers: getAuthHeaders(),\n    })\n\n    console.log(\"Response status:\", response.status)\n    const result = await handleResponse(response)\n\n    // Process video URLs to ensure they have the correct base URL\n    if (result.data && Array.isArray(result.data)) {\n      result.data.forEach((video) => {\n        if (video.videoUrl && !video.videoUrl.includes(\"http\")) {\n          video.videoUrl = `${UPLOAD_URL}/${video.videoUrl.replace(/^\\//, \"\")}`\n        }\n        if (video.thumbnailUrl && !video.thumbnailUrl.includes(\"http\")) {\n          video.thumbnailUrl = `${UPLOAD_URL}/${video.thumbnailUrl.replace(/^\\//, \"\")}`\n        }\n      })\n    }\n\n    console.log(\"Fetched videos:\", result.data?.length || 0, \"videos\")\n    console.log(\"Pagination info:\", result.pagination)\n    return result // Return full result with pagination\n  } catch (error) {\n    console.error(\"Error fetching videos:\", error)\n    throw error\n  }\n}\n\n// Fetch videos with infinite scroll support\nexport const fetchVideosInfinite = async (params = {}) => {\n  try {\n    const defaultParams = {\n      limit: 12, // Default page size for infinite scroll\n      offset: 0,\n      sortBy: \"createdAt\",\n      ...params,\n    }\n\n    const result = await fetchVideos(defaultParams)\n\n    return {\n      videos: result.data || [],\n      pagination: result.pagination || {},\n      hasMore: result.pagination?.hasMore || false,\n      nextOffset: result.pagination?.nextOffset || null,\n    }\n  } catch (error) {\n    console.error(\"Error fetching videos for infinite scroll:\", error)\n    throw error\n  }\n}\n\nexport const fetchVideoById = async (videoId) => {\n  try {\n    console.log(\"Fetching video by ID:\", videoId)\n\n    const url = `${API_BASE_URL}/videos/${videoId}`\n    console.log(\"Fetching from URL:\", url)\n\n    const response = await fetch(url, {\n      headers: getAuthHeaders(),\n    })\n\n    console.log(\"Response status:\", response.status)\n    const result = await handleResponse(response)\n    console.log(\"Fetched video:\", result.data)\n    return result.data\n  } catch (error) {\n    console.error(\"Error fetching video:\", error)\n    throw error\n  }\n}\n\nexport const fetchRelatedVideos = async (videoId, params = {}) => {\n  try {\n    const queryParams = new URLSearchParams()\n    if (params.limit) queryParams.append(\"limit\", params.limit)\n    if (params.offset) queryParams.append(\"offset\", params.offset)\n\n    const response = await fetch(`${API_BASE_URL}/videos/${videoId}/related?${queryParams}`, {\n      headers: getAuthHeaders(),\n    })\n\n    const result = await handleResponse(response)\n    return result.data || []\n  } catch (error) {\n    console.error(\"Error fetching related videos:\", error)\n    throw error\n  }\n}\n\n// Upload video with thumbnail\nexport const uploadVideo = async (videoData) => {\n  try {\n    console.log(\"Uploading video:\", videoData.title)\n\n    const formData = new FormData()\n\n    // Append video file\n    formData.append(\"video\", videoData.videoFile)\n\n    // Append thumbnail if provided\n    if (videoData.thumbnail) {\n      formData.append(\"thumbnail\", videoData.thumbnail)\n    }\n\n    // Append other data\n    formData.append(\"title\", videoData.title)\n    formData.append(\"description\", videoData.description)\n    formData.append(\"category\", videoData.category)\n    formData.append(\"tags\", JSON.stringify(videoData.tags || []))\n    formData.append(\"isPublic\", videoData.isPublic !== false)\n\n    const token = localStorage.getItem(\"authToken\")\n    const response = await fetch(`${API_BASE_URL}/videos/upload`, {\n      method: \"POST\",\n      headers: {\n        ...(token && { Authorization: `Bearer ${token}` }),\n      },\n      body: formData,\n    })\n\n    const result = await handleResponse(response)\n    console.log(\"Video uploaded successfully:\", result.data)\n    return result.data\n  } catch (error) {\n    console.error(\"Error uploading video:\", error)\n    throw error\n  }\n}\n\n// Like or dislike a video\nexport const likeVideo = async (videoId, isLike) => {\n  try {\n    console.log(`${isLike ? \"Liking\" : \"Disliking\"} video:`, videoId)\n\n    const response = await fetch(`${API_BASE_URL}/videos/${videoId}/like`, {\n      method: \"POST\",\n      headers: getAuthHeaders(),\n      body: JSON.stringify({ isLike }),\n    })\n\n    const result = await handleResponse(response)\n    console.log(\"Like action successful:\", result.data)\n    return result.data\n  } catch (error) {\n    console.error(\"Error liking video:\", error)\n    throw error\n  }\n}\n\n// Channel API functions\nexport const fetchChannels = async (channelIds) => {\n  try {\n    console.log(\"Fetching channels for IDs:\", channelIds)\n\n    const queryParams = new URLSearchParams()\n    channelIds.forEach((id) => queryParams.append(\"ids\", id))\n\n    const url = `${API_BASE_URL}/channels?${queryParams}`\n    console.log(\"Fetching from URL:\", url)\n\n    const response = await fetch(url, {\n      headers: getAuthHeaders(),\n    })\n\n    console.log(\"Response status:\", response.status)\n    const result = await handleResponse(response)\n    console.log(\"Fetched channels:\", result.data)\n    return result.data || result\n  } catch (error) {\n    console.error(\"Error fetching channels:\", error)\n    throw error\n  }\n}\n\nexport const fetchChannelById = async (channelId) => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/channels/${channelId}`, {\n      headers: getAuthHeaders(),\n    })\n\n    const result = await handleResponse(response)\n    return result.data || result\n  } catch (error) {\n    console.error(\"Error fetching channel:\", error)\n    throw error\n  }\n}\n\n// Subscribe to a channel\nexport const subscribeToChannel = async (channelId, subscribe = true) => {\n  try {\n    console.log(`${subscribe ? \"Subscribing to\" : \"Unsubscribing from\"} channel:`, channelId)\n\n    const response = await fetch(`${API_BASE_URL}/channels/${channelId}/subscribe`, {\n      method: \"POST\",\n      headers: getAuthHeaders(),\n      body: JSON.stringify({ subscribe }),\n    })\n\n    const result = await handleResponse(response)\n    console.log(\"Subscription action successful:\", result.data)\n    return result.data || result\n  } catch (error) {\n    console.error(\"Error with subscription:\", error)\n    throw error\n  }\n}\n\n// Comment API functions\nexport const fetchVideoComments = async (videoId) => {\n  try {\n    console.log(\"Fetching comments for video:\", videoId)\n\n    const response = await fetch(`${API_BASE_URL}/videos/${videoId}/comments`, {\n      headers: getAuthHeaders(),\n    })\n\n    const result = await handleResponse(response)\n    console.log(\"Fetched comments:\", result.data)\n    return result.data || result\n  } catch (error) {\n    console.error(\"Error fetching comments:\", error)\n    throw error\n  }\n}\n\nexport const addComment = async (videoId, text) => {\n  try {\n    console.log(\"Adding comment to video:\", videoId)\n\n    const response = await fetch(`${API_BASE_URL}/videos/${videoId}/comments`, {\n      method: \"POST\",\n      headers: getAuthHeaders(),\n      body: JSON.stringify({ text }),\n    })\n\n    const result = await handleResponse(response)\n    console.log(\"Comment added successfully:\", result.data)\n    return result.data || result\n  } catch (error) {\n    console.error(\"Error adding comment:\", error)\n    throw error\n  }\n}\n\n// Watch history\nexport const addToWatchHistory = async (videoId, watchTime = 0) => {\n  try {\n    console.log(\"Adding to watch history:\", videoId)\n\n    const response = await fetch(`${API_BASE_URL}/users/me/watch-history`, {\n      method: \"POST\",\n      headers: getAuthHeaders(),\n      body: JSON.stringify({ videoId, watchTime }),\n    })\n\n    const result = await handleResponse(response)\n    console.log(\"Added to watch history:\", result.data)\n    return result.data || result\n  } catch (error) {\n    console.error(\"Error adding to watch history:\", error)\n    // Don't throw error for watch history to prevent disrupting user experience\n    return null\n  }\n}\n\n// Search API functions with pagination\nexport const searchVideos = async (query, filters = {}) => {\n  try {\n    const queryParams = new URLSearchParams()\n    queryParams.append(\"q\", query)\n\n    // Add filter parameters\n    if (filters.category) queryParams.append(\"category\", filters.category)\n    if (filters.duration) queryParams.append(\"duration\", filters.duration)\n    if (filters.uploadDate) queryParams.append(\"uploadDate\", filters.uploadDate)\n    if (filters.sortBy) queryParams.append(\"sortBy\", filters.sortBy)\n    if (filters.limit) queryParams.append(\"limit\", filters.limit)\n    if (filters.offset) queryParams.append(\"offset\", filters.offset)\n\n    const response = await fetch(`${API_BASE_URL}/search?${queryParams}`, {\n      headers: getAuthHeaders(),\n    })\n\n    const result = await handleResponse(response)\n    return result\n  } catch (error) {\n    console.error(\"Error searching videos:\", error)\n    throw error\n  }\n}\n\n// User API functions\nexport const fetchUserProfile = async (userId) => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/users/${userId}`, {\n      headers: getAuthHeaders(),\n    })\n\n    const result = await handleResponse(response)\n    return result.data || result\n  } catch (error) {\n    console.error(\"Error fetching user profile:\", error)\n    throw error\n  }\n}\n\nexport const updateUserProfile = async (userData) => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/users/profile`, {\n      method: \"PUT\",\n      headers: getAuthHeaders(),\n      body: JSON.stringify(userData),\n    })\n\n    const result = await handleResponse(response)\n    return result.data || result\n  } catch (error) {\n    console.error(\"Error updating user profile:\", error)\n    throw error\n  }\n}\n\n// Health check function\nexport const checkApiHealth = async () => {\n  try {\n    const response = await fetch(`${API_BASE_URL.replace(\"/api\", \"\")}/health`)\n    return response.ok\n  } catch (error) {\n    console.error(\"API health check failed:\", error)\n    return false\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
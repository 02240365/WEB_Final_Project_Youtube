{"ast":null,"code":"// auth.js - Authentication service functions\n// Handles login, register, logout, and user management\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || \"http://localhost:5000/api\";\n\n// Helper function to handle API responses\nconst handleResponse = async response => {\n  if (!response.ok) {\n    const error = await response.json().catch(() => ({\n      message: \"Network error\"\n    }));\n    throw new Error(error.message || `HTTP error! status: ${response.status}`);\n  }\n  return response.json();\n};\n\n// Login user\nexport const loginUser = async (email, password) => {\n  const response = await fetch(`${API_BASE_URL}/auth/login`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      email,\n      password\n    })\n  });\n  const data = await handleResponse(response);\n  return data.data;\n};\n\n// Register user\nexport const registerUser = async userData => {\n  const response = await fetch(`${API_BASE_URL}/auth/register`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(userData)\n  });\n  const data = await handleResponse(response);\n  return data.data;\n};\n\n// Logout user\nexport const logoutUser = async () => {\n  const token = localStorage.getItem(\"authToken\");\n  if (!token) return;\n  const response = await fetch(`${API_BASE_URL}/auth/logout`, {\n    method: \"POST\",\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  });\n  return handleResponse(response);\n};\n\n// Get current user\nexport const getCurrentUser = async () => {\n  const token = localStorage.getItem(\"authToken\");\n  if (!token) {\n    throw new Error(\"No auth token found\");\n  }\n  const response = await fetch(`${API_BASE_URL}/auth/me`, {\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  });\n  const data = await handleResponse(response);\n  return data.data.user;\n};","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_URL","handleResponse","response","ok","error","json","catch","message","Error","status","loginUser","email","password","fetch","method","headers","body","JSON","stringify","data","registerUser","userData","logoutUser","token","localStorage","getItem","Authorization","getCurrentUser","user"],"sources":["/Users/sonamzangmo/Desktop/WEB_Final_Project_Youtube/youtube-clone/frontend/src/services/auth.js"],"sourcesContent":["// auth.js - Authentication service functions\n// Handles login, register, logout, and user management\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || \"http://localhost:5000/api\"\n\n// Helper function to handle API responses\nconst handleResponse = async (response) => {\n  if (!response.ok) {\n    const error = await response.json().catch(() => ({ message: \"Network error\" }))\n    throw new Error(error.message || `HTTP error! status: ${response.status}`)\n  }\n  return response.json()\n}\n\n// Login user\nexport const loginUser = async (email, password) => {\n  const response = await fetch(`${API_BASE_URL}/auth/login`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({ email, password }),\n  })\n\n  const data = await handleResponse(response)\n  return data.data\n}\n\n// Register user\nexport const registerUser = async (userData) => {\n  const response = await fetch(`${API_BASE_URL}/auth/register`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(userData),\n  })\n\n  const data = await handleResponse(response)\n  return data.data\n}\n\n// Logout user\nexport const logoutUser = async () => {\n  const token = localStorage.getItem(\"authToken\")\n\n  if (!token) return\n\n  const response = await fetch(`${API_BASE_URL}/auth/logout`, {\n    method: \"POST\",\n    headers: {\n      Authorization: `Bearer ${token}`,\n    },\n  })\n\n  return handleResponse(response)\n}\n\n// Get current user\nexport const getCurrentUser = async () => {\n  const token = localStorage.getItem(\"authToken\")\n\n  if (!token) {\n    throw new Error(\"No auth token found\")\n  }\n\n  const response = await fetch(`${API_BASE_URL}/auth/me`, {\n    headers: {\n      Authorization: `Bearer ${token}`,\n    },\n  })\n\n  const data = await handleResponse(response)\n  return data.data.user\n}\n"],"mappings":"AAAA;AACA;;AAEA,MAAMA,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,2BAA2B;;AAEjF;AACA,MAAMC,cAAc,GAAG,MAAOC,QAAQ,IAAK;EACzC,IAAI,CAACA,QAAQ,CAACC,EAAE,EAAE;IAChB,MAAMC,KAAK,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC,CAACC,KAAK,CAAC,OAAO;MAAEC,OAAO,EAAE;IAAgB,CAAC,CAAC,CAAC;IAC/E,MAAM,IAAIC,KAAK,CAACJ,KAAK,CAACG,OAAO,IAAI,uBAAuBL,QAAQ,CAACO,MAAM,EAAE,CAAC;EAC5E;EACA,OAAOP,QAAQ,CAACG,IAAI,CAAC,CAAC;AACxB,CAAC;;AAED;AACA,OAAO,MAAMK,SAAS,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,KAAK;EAClD,MAAMV,QAAQ,GAAG,MAAMW,KAAK,CAAC,GAAGhB,YAAY,aAAa,EAAE;IACzDiB,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAEP,KAAK;MAAEC;IAAS,CAAC;EAC1C,CAAC,CAAC;EAEF,MAAMO,IAAI,GAAG,MAAMlB,cAAc,CAACC,QAAQ,CAAC;EAC3C,OAAOiB,IAAI,CAACA,IAAI;AAClB,CAAC;;AAED;AACA,OAAO,MAAMC,YAAY,GAAG,MAAOC,QAAQ,IAAK;EAC9C,MAAMnB,QAAQ,GAAG,MAAMW,KAAK,CAAC,GAAGhB,YAAY,gBAAgB,EAAE;IAC5DiB,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACG,QAAQ;EAC/B,CAAC,CAAC;EAEF,MAAMF,IAAI,GAAG,MAAMlB,cAAc,CAACC,QAAQ,CAAC;EAC3C,OAAOiB,IAAI,CAACA,IAAI;AAClB,CAAC;;AAED;AACA,OAAO,MAAMG,UAAU,GAAG,MAAAA,CAAA,KAAY;EACpC,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;EAE/C,IAAI,CAACF,KAAK,EAAE;EAEZ,MAAMrB,QAAQ,GAAG,MAAMW,KAAK,CAAC,GAAGhB,YAAY,cAAc,EAAE;IAC1DiB,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACPW,aAAa,EAAE,UAAUH,KAAK;IAChC;EACF,CAAC,CAAC;EAEF,OAAOtB,cAAc,CAACC,QAAQ,CAAC;AACjC,CAAC;;AAED;AACA,OAAO,MAAMyB,cAAc,GAAG,MAAAA,CAAA,KAAY;EACxC,MAAMJ,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;EAE/C,IAAI,CAACF,KAAK,EAAE;IACV,MAAM,IAAIf,KAAK,CAAC,qBAAqB,CAAC;EACxC;EAEA,MAAMN,QAAQ,GAAG,MAAMW,KAAK,CAAC,GAAGhB,YAAY,UAAU,EAAE;IACtDkB,OAAO,EAAE;MACPW,aAAa,EAAE,UAAUH,KAAK;IAChC;EACF,CAAC,CAAC;EAEF,MAAMJ,IAAI,GAAG,MAAMlB,cAAc,CAACC,QAAQ,CAAC;EAC3C,OAAOiB,IAAI,CAACA,IAAI,CAACS,IAAI;AACvB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}